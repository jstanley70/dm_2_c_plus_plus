#ifndef	__KEY_MACROS__	#define	__KEY_MACROS__		#ifndef	__EVE_3__		#include	"eve3.h"	#endif			#define	KEY_VERSION	2													#ifdef NETWORK_VERSION					#define	KEYTEST(flag)																\		{																							\			short	theResp;																		\			ap[RB_ACCESS_COMMAND_P] 		=  RB_ACCESS_READ;						\			ap[RB_ACCESS_CRYPT1_P] 			=  ENCSEED1;								\			ap[RB_ACCESS_CRYPT2_P] 			=  ENCSEED2;								\			ap[RB_ACCESS_READ_ADDRESS_P] 	=  0;											\			theResp = rbaccess (mp, ap, qp, rp);										\			if(theResp != RB_SUCCESS){														\				flag = true;																	\			}																						\			if(KEY_VERSION > rp[0]){														\				flag = true;																	\			}																						\		}																							\			#define	KEYTEST2(flag)																\		{																							\			short			theResp;																\			RB_SHORT		dap [RB_ACCESS_REQUEST_LEN];									\			RB_SHORT		dqp [RB_ACCESS_REQUEST_LEN];									\			RB_SHORT		dqp2 [RB_ACCESS_REQUEST_LEN];									\			RB_SHORT		drp [RB_ACCESS_REQUEST_LEN];									\			RB_SHORT		drp2 [RB_ACCESS_REQUEST_LEN];									\			dap[RB_ACCESS_COMMAND_P] 			=  RB_ACCESS_READ;					\			dap[RB_ACCESS_CRYPT1_P] 			=  0x4CD1;								\			dap[RB_ACCESS_CRYPT2_P] 			=  0xC4B9;								\			dap[RB_ACCESS_READ_ADDRESS_P] 	=  12;									\			theResp = rbaccess (mp, dap, dqp2, drp);									\			if(theResp != RB_SUCCESS){														\				flag = true;																	\			} else {																				\				dqp[0]	= drp[0];															\				dap[RB_ACCESS_READ_ADDRESS_P] 	=  14;								\				theResp = rbaccess (mp, dap, dqp2, drp);								\				if(theResp != RB_SUCCESS){													\					flag = true;																\				} else {																			\					dqp[1]	= drp[0];														\					dap[RB_ACCESS_COMMAND_P] 		=  RB_ACCESS_QUERY;				\					theResp = rbaccess (mp, dap, dqp, drp);							\					if(theResp != RB_SUCCESS){												\						flag = true;															\					}else{																		\						dap[RB_ACCESS_COMMAND_P] 			=  RB_ACCESS_READ;		\						dap[RB_ACCESS_READ_ADDRESS_P] 	=  16;						\						theResp = rbaccess (mp, dap, dqp2, drp2);						\						if(theResp != RB_SUCCESS || drp2[0] != drp[0]){				\							flag = true;														\						} else {																	\							dap[RB_ACCESS_READ_ADDRESS_P] 	=  18;					\							theResp = rbaccess (mp, dap, dqp2, drp2);					\							if(theResp != RB_SUCCESS || drp2[0] != drp[1]){			\								flag = true;													\							}																		\						}																			\					}																				\				}																					\			}																						\		}																							\							#else					#define	KEYTEST(flag)																\		{																							\			Handle			theKeyHandle;													\			short				iErr;																\			unsigned long	sNum;																\			unsigned short	theResp;															\			theKeyHandle 	= (Handle)RBEHANDLE();										\			theResp			= RBEFINDFIRST(0x8802,&sNum,theKeyHandle);			\			iErr 				= RBEREAD(0x0014,&theResp,0xEC1D,theKeyHandle);		\			if(KEY_VERSION > theResp){														\				flag	= true;																	\			}																						\			DisposeHandle(theKeyHandle);													\		}																							\											#define	KEYTEST2(flag)																		\		{																									\			Handle			theKeyHandle;															\			short				iErr;																		\			double			value,oldValue;														\			unsigned long	sNum;																		\			unsigned short	theResp;																	\			value				= 12.14;																	\			theKeyHandle 	= (Handle)RBEHANDLE();												\			for(iErr = 1 ; iErr < 10 ; iErr++){													\				oldValue		= value;																	\				switch(iErr){																			\					case 3:																				\						theResp			= RBEFINDFIRST(0x8802,&sNum,theKeyHandle);		\						if(theResp != 0){																\							theResp		= RBEFINDFIRST(0x8802,&sNum,theKeyHandle);		\							if(theResp != 0){															\								theResp 	= 0;															\								iErr		+= 4;															\							}																				\						}																					\						break;																			\					case 6:																				\						value 			+= RBEREAD(0x0014,&theResp,0xEC1D,theKeyHandle);\						if(value != oldValue){														\							theResp		= RBEFINDFIRST(0x8802,&sNum,theKeyHandle);		\							value			+= sNum;														\							value 		+= RBEREAD(0x0014,&theResp,0xEC1D,theKeyHandle);\						}																					\						break;																			\					case 8:																				\						if(KEY_VERSION > theResp){													\							flag	= true;																\						}																					\						break;																			\					default:																				\						value = value * value / (double)iErr;									\						break;																			\				}																							\				value += (double)iErr * 3.1415926;												\			}																								\			DisposeHandle(theKeyHandle);															\		}																									\		#endif#endif