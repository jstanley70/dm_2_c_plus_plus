//rces.Jim:Diffract:Diffract Headers:SpotObject.h#ifndef		SPOT_OBJ#define		SPOT_OBJ#include	"COMPLEX_LOC.h"#include	"LineObj.h"#define		CRYSTAL_MASK	0x00000007#define		DIR_FLAG		0x00000008#define		XTAL_ROT		0x00000010#define		PLANE_TRACE		0x00000020#define		SMALL_CIRCLE	0x00000040#define		BEAM_MASK		0x00000080#define		PIN_MASK		0x00000100#define		DEFECT_MASK		0x00000200#define		PRIME_MASK		0x00000400#define		LINE_MASK		0x00000800#define		HABIT_MASK		0x00001000#define		K_MAP_MASK		0x00002000#define		MARK_MASK		0x00001F80#define		TEXT_MASK		0x40000000#define		ANGLE_FLAG		0x80000000#define		SPOT_FUNCS		0xC0000000#define		FIX_MASK		0x7FFFFFFF#define		DRAW_MASK		0x00000060#define		FLAG_MASK		0xF0001FF0		#define		SYMMETRY_MASK	0x00004000	#define		BETH_PERTURB	0x00008000#define		POLE_FIGURE	0x00010000#define		POLE_001	0x00020000#define		POLE_110	0x00040000#define		POLE_111	0x00080000#define		POLE_012	0x00100000#define		POLE_112	0x00200000#define		POLE_USER	0x00400000#define		POLE_ALL	0x00FF0000#define		TOO_BIG 	0x01000000		typedef	struct	ZoomInfo{	Point		theObjectSize;	short		hScrollValue;		short		vScrollValue;	} ZoomInfo;		typedef struct PolePosition{	SpotInfo  zoneAxis;	SpotInfo	gvector;}PolePosition,*PolePositionPtr,*PolePositionHandle;#include	"TextObj.h"#define	THE_CURRENT_SPOT		((*((SpotInfoHandle)theDataHandle))[spotLoc])#pragma def_inherited onclass	SpotObject : public DiffractObject{		public:						Point					theEvtPoint;			Boolean				fixPicFlag;						PopUpPicture	*thePopUpPict;						TextObj				*theLabels;		/*These are currently only used in a limited number of objects*/			TextRoundObj	*theCurvedLabels;			TextObj				*theTextObj;			TextRoundObj	*theRoundObj;						LineObj		 		*theLine;			Boolean		FindSpot(Point thePoint);/*in Base*/	void				DoInit(void);/*in Base*/	void				DoClose(void);			void				DrawSpotAttributes(void);			virtual void		DeleteSpot(void);			virtual void		LabelSpot(void);			void				ShowAngleBetween(void);			void				DrawLine(void);			void				DrawCircle(void);/*in Base*/	void				DoMenu(long);				/*	Menu Method						*//*in Base*/	Boolean				DoContent(Point);			/*	Content Method					*//*in Base*/	void				DoIdle(void);				/*	Idle Routine					*//*in Base*/	void				DoKey(char);/*in Base*/	void				DoRefresh(void);			virtual PicHandle	SetInfoPict(void);			virtual void		ShowInfo(void);	/*in Base*/	void				DoAuxRead(void);/*in Base*/	void				RationalizeData(void);		/*	Allows reconnect of ptr hooks 	*/			virtual void		HilightDataPoint(SpotInfoPtr theSpot);/* Allows various types of hilighting JT September */						void				ResetMoveableLabels(void);			void				ResetCurvedLabels(void);			void 				KillAllLabels(void);						void				GetRotPptwrtoMatrix(ORel*,double[][3]);	void  ConvertToTextTable(void);	void DoDblClick(Point);	void DoAllSpots(Boolean flag); //Override			private:void ActionsOnSpot(short theIdent);};	#endif