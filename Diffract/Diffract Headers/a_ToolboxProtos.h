//a_ToolboxProtos.h#include <AppleEvents.h>#include <Controls.h>#include <Desk.h>#include <Devices.h>#include <Dialogs.h>#include <Events.h>#include <Files.h>#include <Fonts.h>#include <Gestalt.h>#include <HFS.h>#include <IntlPkg.h>#include <Lists.h>#include <Types.h>#include <Memory.h>#include <Menus.h>#include <OSUtils.h>#include <Packages.h>#include <Printing.h>#include <PrintTraps.h>#include <Quickdraw.h>#include <Resources.h>#include <Scrap.h>#include <SegLoad.h>#include <Serial.h>#include <Slots.h>/*  SoundMgr adds in Sane which kills FP compiles#include <SoundDvr.h>#include <SoundMgr.h>*/#include <StandardFile.h>#include <TextEdit.h>#include <ToolUtils.h>#include <Retrace.h>#include <Windows.h>#include <asm.h>#include <pascal.h>#include <unix.h>/*  Resource Manager */pascal	short				InitResources(void);pascal	void				RsrcZoneInit(void);pascal	void				CreateResFile(char*);pascal	short				OpenResFile(char*);pascal	void				CloseResFile(short);pascal	short				ResError(void);pascal	short				CurResFile(void);pascal	short				HomeResFile(Handle);pascal	void				UseResFile(short);pascal	short				CountTypes(void);pascal	void				GetIndType(ResType*,short);pascal	void				SetResLoad(Boolean);pascal	short				CountResources(ResType);pascal	Handle				GetIndResource(ResType,short);pascal	Handle				GetResource(ResType,short);pascal	Handle				GetNamedResource(ResType,char*);pascal	void				LoadResource(Handle);pascal	void				ReleaseResource(Handle);pascal	void				DetachResource(Handle);pascal	short				UniqueID(ResType);pascal	void				GetResInfo(Handle,short*,ResType*,char*);pascal	short				GetResAttrs(Handle);pascal	long				SizeResource(Handle);pascal	void				SetResInfo(Handle,short,char*);pascal	void				SetResAttrs(Handle,short);pascal	void				ChangedResource(Handle);pascal	void				Addresource(Handle,ResType,short,char*);pascal	void				RmveResource(Handle);pascal	void				UpdateResFile(short);pascal	void				WriteResource(Handle);pascal	short				GetResFileAttrs(short);pascal	void				SetResFileAttrs(short,short);pascal	short				Count1Types(void);pascal	void				Get1IndType(ResType*,short);pascal	short				Count1Resources(ResType);pascal	Handle				Get1IndResource(ResType,short);pascal	Handle				Get1Resource(ResType,short);pascal	Handle				Get1NamedResource(ResType,char*);pascal	short				Unique1ID(ResType);pascal	long				MaxSizeRsrc(Handle);pascal	long				RsrcMapEntry(Handle);pascal	short				OpenRFPerm(char*,short,Byte);pascal	Handle				RGetResource(ResType,short);/* QuickDraw routines */pascal	void				InitGraf(GrafPtr*);pascal	void				OpenPort(GrafPtr);pascal	void				InitPort(GrafPtr);pascal	void				ClosePort(GrafPtr);pascal	void				SetPort(GrafPtr);pascal	void				GetPort(GrafPtr*);pascal	void				GrafDevice(short);pascal	void				SetPortBits(BitMap*);pascal	void				PortSize(short,short);pascal	void				MovePortTo(short,short);pascal	void				SetOrigin(short,short);pascal	void				SetClip(RgnHandle);pascal	void				GetClip(RgnHandle);pascal	void				ClipRect(Rect*);pascal	void				BackPat(Pattern*);pascal	void				InitCursor(void);pascal	void				SetCursor(Cursor*);pascal	void				HideCursor(void);pascal	void				ShowCursor(void);pascal	void				ObscureCursor(void);pascal	void				HidePen(void);pascal	void				ShowPen(void);pascal	void				GetPen(Point*);pascal	void				GetPenState(PenState*);pascal	void				SetPenState(PenState*);pascal	void				PenSize(short,short);pascal	void				PenMode(short);pascal	void				PenPat(Pattern*);pascal	void				PenNormal(void);pascal	void				MoveTo(short,short);pascal	void				Move(short,short);pascal	void				LineTo(short,short);pascal	void				Line(short,short);pascal	void				TextFont(short);pascal	void				TextFace(short);pascal	void				TextMode(short);pascal	void				TextSize(short);pascal	void				SpaceExtra(Fixed);pascal	void				DrawChar(short);pascal	void				DrawString(char*);pascal	void				DRawText(Ptr,short,short);pascal	short				CharWidth(short);pascal	short				StringWidth(char*);pascal	short				TextWidth(Ptr,short,short);pascal	void				GetFontInfo(FontInfo*);pascal	void				ForeColor(long);pascal	void				BackColor(long);pascal	void				ColorBit(short);pascal	void				SetRect(Rect*,short,short,short,short);pascal	void				OffsetRect(Rect*,short,short);pascal	void				InsetRect(Rect*,short,short);pascal	Boolean				SectRect(Rect*,Rect*,Rect*);pascal	void				UnionRect(Rect*,Rect*,Rect*);pascal	Boolean				PtInRect(Point,Rect*);pascal	void				Pt2Rect(Point,Point,Rect*);pascal	void				PtToAngle(Rect*,Point,short*);pascal	Boolean				EqualRect(Rect*,Rect*);pascal	Boolean				EmptyRect(Rect*);pascal	void				FrameRect(Rect*);pascal	void				PaintRect(Rect*);pascal	void				EraseRect(Rect*);pascal	void				InvertRect(Rect*);pascal	void				FillRect(Rect*,Pattern*);pascal	void				FrameOval(Rect*);pascal	void				PaintOval(Rect*);pascal	void				EraseOval(Rect*);pascal	void				InvertOval(Rect*);pascal	void				FillOval(Rect*,Pattern*);pascal	void				FrameRoundRect(Rect*,short,short);pascal	void				PaintRoundRect(Rect*,short,short);pascal	void				EraseRoundRect(Rect*,short,short);pascal	void				InvertRoundRect(Rect*,short,short);pascal	void				FillRoundRect(Rect*,short,short,Pattern*);pascal	void				FrameArc(Rect*,short,short);pascal	void				PaintArc(Rect*,short,short);pascal	void				EraseArc(Rect*,short,short);pascal	void				InvertArc(Rect*,short,short);pascal	void				FillArc(Rect*,short,short,Pattern*);pascal	RgnHandle			NewRgn(void);pascal	void				OpenRgn(void);pascal	void				CloseRgn(RgnHandle);pascal	void				DisposeRgn(RgnHandle);pascal	void				CopyRgn(RgnHandle,RgnHandle);pascal	void				SetEmptyRgn(RgnHandle);pascal	void				SetRectRgn(RgnHandle,short,short,short,short);pascal	void				RectRgn(RgnHandle,Rect*);pascal	void				OffsetRgn(RgnHandle,short,short);pascal	void				InsetRgn(RgnHandle,short,short);pascal	void				SectRgn(RgnHandle,RgnHandle,RgnHandle);pascal	void				UnionRgn(RgnHandle,RgnHandle,RgnHandle);pascal	void				DiffRgn(RgnHandle,RgnHandle,RgnHandle);pascal	void				XorRgn(RgnHandle,RgnHandle,RgnHandle);pascal	Boolean				PtInRgn(Point,RgnHandle);pascal	Boolean				RectInRgn(Rect*,RgnHandle);pascal	Boolean				EqualRgn(RgnHandle,RgnHandle);pascal	Boolean				EmptyRgn(RgnHandle);pascal	void				FrameRgn(RgnHandle);pascal	void				PaintRgn(RgnHandle);pascal	void				EraseRgn(RgnHandle);pascal	void				InvertRgn(RgnHandle);pascal	void				FillRgn(RgnHandle,Pattern*);pascal	void				ScrollRect(Rect*,short,short,RgnHandle);pascal	void				CopyBits(BitMap*,BitMap*,Rect*,Rect*,short,RgnHandle);pascal	PicHandle			OpenPicture(Rect*);pascal	void				ClosePicture(void);pascal	void				PicComment(short,short,Handle);pascal	void				DrawPicture(PicHandle,Rect*);pascal	void				KillPicture(PicHandle);pascal	PolyHandle			OpenPoly(void);pascal	void				ClosePoly(void);pascal	void				KillPoly(PolyHandle);pascal	void				OffsetPoly(PolyHandle,short,short);pascal	void				FramePoly(PolyHandle);pascal	void				PaintPoly(PolyHandle);pascal	void				ErasePoly(PolyHandle);pascal	void				InvertPoly(PolyHandle);pascal	void				FillPoly(PolyHandle,Pattern*);pascal	void				AddPt(Point,Point*);pascal	void				SubPt(Point,Point*);pascal	void				SetPt(Point*,short,short);pascal	Boolean				EqualPt(Point,Point);pascal	void				LocalToGlobal(Point*);pascal	void				GlobalToLocal(Point*);pascal	short				Random(void);pascal	Boolean				GetPixel(short,short);pascal	void				StuffHex(Ptr,char*);pascal	void				ScalePt(Point*,Rect*,Rect*);pascal	void				MapPt(Point*,Rect*,Rect*);pascal	void				MapRect(Rect*,Rect*,Rect*);pascal	void				MapRgn(RgnHandle,Rect*,Rect*);pascal	void				MapPoly(PolyHandle,Rect*,Rect*);pascal	void				SetStdProcs(QDProcs*);pascal	void				StdText(short,Ptr,Point,Point);pascal	void				StdLine(Point);pascal	void				StdRect(GrafVerb,Rect*);pascal	void				StdRRect(GrafVerb,Rect*,short,short);pascal	void				StdOval(GrafVerb,Rect*);pascal	void				StdArc(GrafVerb,Rect*,short,short);pascal	void				StdPoly(GrafVerb,PolyHandle);pascal	void				StdRgn(GrafVerb,RgnHandle);pascal	void				StdBits(BitMap*,Rect*,Rect*,short,RgnHandle);pascal	void				StdComment(short,short,Handle);pascal	short				StdTxMeas(short,Ptr,Point*,Point*,FontInfo*);pascal	void				StdGetPic(Ptr,short);pascal	void				StdPutPic(Ptr,short);pascal	void				SeedFill(Ptr,Ptr,short,short,short,short,short,short);pascal	void				CalcMask(Ptr,Ptr,short,short,short,short);pascal	void				CopyMask(BitMap*,BitMap*,BitMap*,Rect*,Rect*,Rect*);pascal	void				MeasureText(short,Ptr,Ptr);/*  Font Manager   */pascal	void				InitFonts(void);pascal	void				GetFontName(short,char*);pascal	void				GetFNum(char*,short*);pascal	Boolean				RealFont(short,short);pascal	void				SetFontLock(Boolean);pascal	FMOutPtr			FMSwapFont(FMInput*);pascal	void				FontMetrics(FMetricRec*);pascal	void				SetFractEnable(Boolean);pascal	void				SetFScaleDisable(Boolean);/*  ToolBox Event Manager   */pascal	Boolean				GetNextEvent(short,EventRecord*);pascal	Boolean				EventAvail(short,EventRecord*);pascal	void				GetMouse(Point*);pascal	Boolean				Button(void);				pascal	Boolean				StillDown(void);				pascal	Boolean				WaitMouseUp(void);				pascal	void				GetKeys(KeyMap*);pascal	long				TickCount(void);pascal	unsigned long		GetDblTime(void);pascal	unsigned long		GetCaretTime(void);pascal	long				KeyTrans(Ptr,short,long*);pascal	Boolean				WaitNextEvent(unsigned short,EventRecord*,unsigned long,RgnHandle);				/*  Window Manager   */pascal	void				InitWindows(void);pascal	void				GetWMgrPort(GrafPtr*);pascal	WindowPtr			NewWindow(Ptr,Rect*,char*,Boolean,short,WindowPtr,Boolean,long);pascal	WindowPtr			GetNewWindow(short,Ptr,WindowPtr);pascal	void				CloseWindow(WindowPtr);pascal	void				DisposeWindow(WindowPtr);pascal	void				SetWTitle(WindowPtr,char*);pascal	void				GetWTitle(WindowPtr,char*);pascal	void				SelectWindow(WindowPtr);pascal	void				ShowWindow(WindowPtr);pascal	void				ShowHide(WindowPtr,Boolean);pascal	void				HiliteWindow(WindowPtr,Boolean);pascal	void				BringToFront(WindowPtr);pascal	void				SendBehind(WindowPtr,WindowPtr);pascal	WindowPtr			FrontWindow(void);pascal	void				DrawGrowIcon(WindowPtr);pascal	short				FindWindow(Point,WindowPtr*);pascal	Boolean				TrackGoAway(WindowPtr,Point);pascal	void				MoveWindow(WindowPtr,short,short,Boolean);pascal	void				DragWindow(WindowPtr,Point,Rect*);pascal	long				GrowWindow(WindowPtr,Point,Rect*);pascal	void				SizeWindow(WindowPtr,short,short,Boolean);pascal	void				InvalRect(Rect*);pascal	void				InvalRgn(RgnHandle);pascal	void				ValidRect(Rect*);pascal	void				ValidRgn(RgnHandle);pascal	void				BeginUpdate(WindowPtr);pascal	void				EndUpdate(WindowPtr);pascal	void				SetWRefCon(WindowPtr,long);pascal	long				GetWRefCon(WindowPtr);pascal	void				SetWindowPic(WindowPtr,PicHandle);pascal	PicHandle			GetWindowPic(WindowPtr);pascal	long				PinRect(Rect*,Point);pascal	long				DragGrayRgn(RgnHandle,Point,Rect*,Rect*,short,ProcPtr);pascal	Boolean				CheckUpdate(EventRecord*);pascal	void				ClipAbove(WindowPeek);pascal	void				SaveOld(WindowPeek);pascal	void				DrawNew(WindowPeek,Boolean);pascal	void				PaintOne(WindowPeek,RgnHandle);pascal	void				PaintBehind(WindowPeek,RgnHandle);pascal	void				CalcVis(WindowPeek);pascal	void				CalcVisBehind(WindowPeek,RgnHandle);pascal	Boolean				TrackBox(WindowPtr,Point,short);pascal	void				ZoomWindow(WindowPtr,short,Boolean);pascal	WindowPtr			NewCWindow(Ptr,Rect*,char*,Boolean,short,WindowPtr,Boolean,long);pascal	WindowPtr			GetNewCWindow(short,Ptr,WindowPtr);pascal	void				SetWinColor(WindowPtr,CTabHandle);pascal	Boolean				GetAuxWin(WindowPtr,CTabHandle*);pascal	short				GetWVariant(WindowPtr);pascal	RgnHandle			GetGrayRgn(void);/*  Control Manager */pascal	ControlHandle		NewControl(WindowPtr,Rect*,char*,Boolean,short,short,short,short,long);pascal	ControlHandle		GetNewControl(short,WindowPtr);pascal	void				DisposeControl(ControlHandle);pascal	void				KillControls(WindowPtr);pascal	void				SetCTitle(ControlHandle,char*);pascal	void				GetCTitle(ControlHandle,char*);pascal	void				HideControl(ControlHandle);pascal	void				ShowControl(ControlHandle);pascal	void				DrawControls(WindowPtr);pascal	void				HiliteControl(ControlHandle,short);pascal	short				FindControl(Point,WindowPtr,ControlHandle*);pascal	short				TrackControl(ControlHandle,Point,ProcPtr);pascal	short				TestControl(ControlHandle,Point);pascal	void				MoveControl(ControlHandle,short,short);pascal	void				DragControl(ControlHandle,Point,Rect*,Rect*,short);pascal	void				SizeControl(ControlHandle,short,short);pascal	void				SetCtlValue(ControlHandle,short);pascal	short				GetCtlValue(ControlHandle);pascal	void				SetCtlMin(ControlHandle,short);pascal	short				GetCtlMin(ControlHandle);pascal	void				SetCtlMax(ControlHandle,short);pascal	short				GetCtlMax(ControlHandle);pascal	void				SetCRefCon(ControlHandle,long);pascal	long				GetCRefCon(ControlHandle);pascal	void				SetCtlAction(ControlHandle,ProcPtr);pascal	ProcPtr				GetCtlAction(ControlHandle);pascal	void				UpdtControl(WindowPtr,RgnHandle);pascal	void				Draw1Control(ControlHandle);pascal	short				GetCVariant(ControlHandle);pascal	void				SetCtlColor(ControlHandle,CCTabHandle);pascal	Boolean				GetAuxCtl(ControlHandle,AuxCtlHndl*);/*  Menu Manager  */pascal	void				InitMenus(void);pascal	MenuHandle			NewMenu(short,char*);pascal	MenuHandle			GetMenu(short);pascal	void				DisposeMenu(MenuHandle);pascal	void				AppendMenu(MenuHandle,char*);pascal	void				AddResMenu(MenuHandle,ResType);pascal	void				InsertResMenu(MenuHandle,ResType,short);pascal	void				InsertMenu(MenuHandle,short);pascal	void				DrawMenuBar(void);pascal	void				DeleteMenu(short);pascal	void				ClearMenuBar(void);pascal	Handle				GetNewMBar(short);pascal	Handle				GetMenuBar(void);pascal	void				SetMenuBar(Handle);pascal	long				MenuSelect(Point);pascal	long				MenuKey(short);pascal	void				HiliteMenu(short);pascal	void				SetItem(MenuHandle,short,char*);pascal	void				GetItem(MenuHandle,short,char*);pascal	void				DisableItem(MenuHandle,short);pascal	void				EnableItem(MenuHandle,short);pascal	void				CheckItem(MenuHandle,short,Boolean);pascal	void				SetItemMark(MenuHandle,short,short);pascal	void				GetItemMark(MenuHandle,short,short*);pascal	void				SetItemIcon(MenuHandle,short,short);pascal	void				GetItemIcon(MenuHandle,short,short*);pascal	void				SetItemStyle(MenuHandle,short,short);pascal	void				GetItemStyle(MenuHandle,short,short*);pascal	void				CalcMenuSize(MenuHandle);pascal	short				CountMItems(MenuHandle);pascal	MenuHandle			GetMHandle(short);pascal	void				FlashMenuBar(short);pascal	void				SetMenuFlash(short);pascal	void				InsMenuItem(MenuHandle,char*,short);pascal	void				DelMenuItem(MenuHandle,short);pascal	void				InitProcMenu(short);pascal	void				DelMCEntries(short,short);pascal	MCTableHandle		GetMCInfo(void);pascal	void				SetMCInfo(MCTableHandle);pascal	void				DispMCInfo(MCTableHandle);pascal	MCEntryPtr			GetMCEntry(short,short);pascal	void				SetMCEntries(short,MCTablePtr);pascal	long				MenuChoice(void);pascal	void				GetItemCmd(MenuHandle,short,short*);pascal	void				SetItemCmd(MenuHandle,short,short);pascal	long				PopUpMenuSelect(MenuHandle,short,short,short);/*  TextEdit     */pascal	void				TEInit(void);pascal	TEHandle			TENew(Rect*,Rect*);pascal	void				TEDispose(TEHandle);pascal	void				TESetText(Ptr,long,TEHandle);pascal	CharsHandle			TEGetText(TEHandle);pascal	void				TEIdle(TEHandle);pascal	void				TEClick(Point,Boolean,TEHandle);pascal	void				TESetSelect(long,long,TEHandle);pascal	void				TEActivate(TEHandle);pascal	void				TEDeactivate(TEHandle);pascal	void				TEKey(short,TEHandle);pascal	void				TECut(TEHandle);pascal	void				TECopy(TEHandle);pascal	void				TEPaste(TEHandle);pascal	void				TEDelete(TEHandle);pascal	void				TEInsert(Ptr,long,TEHandle);pascal	void				TESetJust(short,TEHandle);pascal	void				TEUpdate(Rect*,TEHandle);pascal	void				TextBox(Ptr,long,Rect*,short);pascal	void				TEScroll(short,short,TEHandle);pascal	OSErr				TEFromScrap(void);pascal	OSErr				TEToScrap(void);pascal	Handle				TEScrapHandle(void);pascal	long				TEGetScrapLen(void);pascal	void				TESetScrapLen(long);pascal	void				SetWordBreak(ProcPtr,TEHandle);pascal	void				SetClickLoop(ProcPtr,TEHandle);pascal	void				TECalText(TEHandle);pascal	void				TESelView(TEHandle);pascal	void				TEPinScroll(short,short,TEHandle);pascal	void				TEAutoView(Boolean,TEHandle);pascal	TEHandle			TEStylNew(Rect*,Rect*);pascal	void				SetStylHandle(TEStyleHandle,TEHandle);pascal	TEStyleHandle		GetStylHandle(TEHandle);pascal	StScrpHandle		GetStylScrap(TEHandle);pascal	void				TEStylInsert(Ptr,long,StScrpHandle,TEHandle);pascal	short				TEGetOffset(Point,TEHandle);pascal	long				TEGetPoint(short,TEHandle);pascal	long				TEGetHeight(long,long,TEHandle);pascal	void				TEGetStyle(short,TextStyle*,short*,short*,TEHandle);pascal	void				TEStylPaste(TEHandle);pascal	void				TESetStyle(short,TextStyle*,Boolean,TEHandle);pascal	void				TEReplaceStyle(short,TextStyle*,TextStyle*,Boolean,TEHandle);/*  Dialog Manager */pascal	void				InitDialogs(ProcPtr);pascal	void				ErrorSound(ProcPtr);pascal	void				SetDAFont(short);pascal	DialogPtr			NewDialog(DialogRecord*,Rect*,char*,Boolean,short,WindowPtr,Boolean,long,Handle);pascal	DialogPtr			GetNewDialog(short,DialogRecord*,WindowPtr);pascal	void				CloseDialog(DialogPtr);pascal	void				DisposDialog(DialogPtr);pascal	void				FreeDialog(short);pascal	void				CouldDialog(short);pascal	void				ModalDialog(ProcPtr,short*);pascal	Boolean				IsDialogEvent(EventRecord*);pascal	Boolean				DialogSelect(EventRecord*,DialogPtr,short*);pascal	void				DlgCut(DialogPtr);pascal	void				DlgCopy(DialogPtr);pascal	void				DlgPaste(DialogPtr);pascal	void				DlgDelete(DialogPtr);pascal	void				DrawDialog(DialogPtr);pascal	short				Alert(short,ProcPtr);pascal	short				StopAlert(short,ProcPtr);pascal	short				NoteAlert(short,ProcPtr);pascal	short				CautionAlert(short,ProcPtr);pascal	void				CouldAlert(short);pascal	void				FreeAlert(short);pascal	void				GetDItem(DialogPtr,short,short*,ControlHandle*,Rect*);pascal	void				SetDItem(DialogPtr,short,short,ControlHandle,Rect*);pascal	void				GetIText(ControlHandle,char*);pascal	void				SetIText(ControlHandle,char*);pascal	void				SelIText(DialogPtr,short,short,short);pascal	short				GetAlrtStage(void);pascal	void				ResetAlrtStage(void);pascal	void				HideDItem(DialogPtr,short);pascal	void				ShowDItem(DialogPtr,short);pascal	short				FindDItem(DialogPtr,Point);pascal	void				UpdtDialog(DialogPtr,RgnHandle);pascal	DialogPtr			NewCDialog(DialogRecord*,Rect*,char*,Boolean,short,WindowPtr,Boolean,long,Handle);/* Desk Manager  */pascal	short				OpenDeskAcc(char*);pascal	void				CloseDeskAcc(short);pascal	void				SystemClick(EventRecord*,WindowPtr);pascal	Boolean				SystemEdit(short);pascal	void				SystemTask(void);pascal	Boolean				SystemEvent(EventRecord*);pascal	void				SystemMenu(long);/*  Scrap Manager */pascal	PScrapStuff				InfoScrap(void);pascal	long				UnloadScrap(void);pascal	long				LoadScrap(void);pascal	long				ZeroScrap(void);pascal	long				PutScrap(long,ResType,Ptr);pascal	long				GetScrap(Handle,ResType,long*);/*  ToolBox Utilities Manager   */pascal	Fixed				FixRatio(short,short);pascal	Fixed				FixRatioFixMul(Fixed,Fixed);pascal	short				FixRound(Fixed);pascal	StringHandle		NewString(char*);pascal	void				SetString(StringHandle,char*);pascal	StringHandle		GetString(short);pascal	void				GetIndString(char*,short,short);pascal	long				Munger(Handle,long,Ptr,long,Ptr,long);pascal	void				PackBits(Ptr*,Ptr*,short);pascal	void				UnpackBits(Ptr*,Ptr*,short);pascal	Boolean				BitTst(Ptr,long);pascal	void				BitSet(Ptr,long);pascal	void				BitClr(Ptr,long);pascal	long				BitAnd(long,long);pascal	long				BitOr(long,long);pascal	long				BitXor(long,long);pascal	long				BitNot(long);pascal	long				BitShift(long,short);pascal	short				HiWord(long);pascal	short				LoWord(long);pascal	void				LongMul(long,long,Int64Bit*);pascal	void				ScreenRes(short*,short*);pascal	Handle				GetIcon(short);pascal	void				PlotIcon(Rect*,Handle);pascal	PatHandle			GetPattern(short);pascal	void				GetIndPattern(Pattern*,short,short);pascal	CursHandle			GetCursor(short);pascal	void				ShieldCursor(Rect*,Point);pascal	PicHandle			GetPicture(short);pascal	long				DeltaPoint(Point,Point);pascal	Fixed				FixRatioSlopeFromAngle(short);pascal	short				AngleFromSlope(Fixed);/* Standard File Packagepascal	void				SFGetFile(Point,StringPtr,ProcPtr,short,SFTypeList,ProcPtr,SFReply*);pascal	void				SFPutFile(Point,StringPtr,StringPtr,ProcPtr,SFReply*);pascal	void				SFPGetFile(Point,StringPtr,ProcPtr,short,SFTypeList,ProcPtr,SFReply*,short,ProcPtr); *//*  Memory Manager     */pascal	void				InitApplZone(void);pascal	void				SetApplBase(Ptr);pascal	void				InitZone(ProcPtr,short,Ptr,Ptr);pascal	Ptr					GetApplLimit(void);pascal	void				SetApplLimit(Ptr);pascal	void				MaxApplZone(void);pascal	void				MoreMasters(void);pascal	THz					GetZone(void);pascal	void				SetZone(THz);pascal	THz					SystemZone(void);pascal	THz					ApplicZone(void);pascal	Handle				NewHandle(long);pascal	void				DisposHandle(Handle);pascal	long				GetHandleSize(Handle);pascal	void				SetHandleSize(Handle,long);pascal	THz					HandleZone(Handle);pascal	Handle				RecoverHandle(Ptr);pascal	void				ReallocHandle(Handle,long);pascal	Ptr					NewPtr(long);pascal	void				DisposPtr(Ptr);pascal	long				GetPtrSize(Ptr);pascal	void				SetPtrSize(Ptr,long);pascal	THz					PtrZone(Ptr);pascal	long				FreeMem(void);pascal	long				MaxMem(long*);pascal	long				CompactMem(long);pascal	void				ResrvMem(long);pascal	void				PurgeMem(long);pascal	void				EmptyHandle(Handle);pascal	void				HLock(Handle);pascal	void				HUnlock(Handle);pascal	void				HPurge(Handle);pascal	void				HNoPurge(Handle);pascal	void				SetGrowZone(ProcPtr);pascal	Handle				GZSaveHnd(void);pascal	void				BlockMove(Ptr,Ptr,long);pascal	Ptr					TopMem(void);pascal	void				MoveHHi(Handle);pascal	OSErr				MemError(void);pascal	long				MaxBlock(void);pascal	void				PurgeSpace(long*,long*);pascal	long				StackSpace(void);pascal	Handle				NewEmptyHandle(void);pascal	void				HSetRBit(Handle);pascal	void				HClrRBit(Handle);pascal	SignedByte			HGetState(Handle);pascal	void				HSetState(Handle,SignedByte);/*  Segment Loader     */pascal	void				CountAppFiles(short*,short*);pascal	void				GetAppFiles(short,AppFile*);pascal	void				ClrAppFiles(short);pascal	void				GetAppParms(char*,short*,Handle*);pascal	void				UnloadSeg(Ptr);pascal	void				ExitToShell(void);/*  OS Event     */pascal	OSErr				PostEvent(short,long);pascal	void				FlushEvents(short,short);pascal	Boolean				GetOSEvent(short,EventRecord*);pascal	Boolean				OSEventAvail(short,EventRecord*);pascal	void				SetEventMask(short);pascal	OSErr				PPostEvent(short,long,EvQEl*);/*  FileManager     */pascal	OSErr				GetVInfo(short,char*,short*,long*);pascal	OSErr				GetVRefNum(short,short*);pascal	OSErr				GetVol(char*,short*);pascal	OSErr				SetVol(char*,short);pascal	OSErr				FlushVol(char*,short);pascal	OSErr				UnMountVol(char*,short);pascal	OSErr				Eject(char*,short);pascal	OSErr				FSOpen(char*,short,short*);pascal	OSErr				OpenRF(char*,short,short*);pascal	OSErr				FSRead(short,long*,Ptr);pascal	OSErr				FSWrite(short,long*,Ptr);pascal	OSErr				GetFPos(short,long);pascal	OSErr				SetFPos(short,short,long);pascal	OSErr				GetEOF(short,long*);pascal	OSErr				SetEOF(short,long);pascal	OSErr				Allocate(short,long);pascal	OSErr				FSClose(short);pascal	OSErr				Create(char*,short,OSType,OSType);pascal	OSErr				FSDelete(char*,short);pascal	OSErr				GetFInfo(char*,short,FInfo*);pascal	OSErr				SetFInfo(char*,short,FInfo*);pascal	OSErr				SetFLock(char*,short);pascal	OSErr				RstFLock(char*,short);pascal	OSErr				ReName(char*,short,char*);pascal	void				FInitQueue(void);/**************Volume Access		*/pascal	OSErr				PBMountVol(volumeParam*);pascal	OSErr				PBGetVInfo(volumeParam*,Boolean);pascal	OSErr				PBHGetVInfo(HParmBlkPtr,Boolean);pascal	OSErr				PBSetVInfo(HParmBlkPtr,Boolean);pascal	OSErr				PBGetVol(volumeParam*,Boolean);pascal	OSErr				PBHGetVol(WDPBPtr,Boolean);pascal	OSErr				PBSetVol(volumeParam*,Boolean);pascal	OSErr				PBHSetVol(WDPBPtr,Boolean);pascal	OSErr				PBFlushVol(volumeParam*,Boolean);pascal	OSErr				PBUnmountVol(volumeParam*);pascal	OSErr				PBOffLine(volumeParam*);pascal	OSErr				PBEject(volumeParam*);/**************IO Access		*/pascal	OSErr				PBOpen(ioParam*,Boolean);pascal	OSErr				PBHOpen(ioParam*,Boolean);pascal	OSErr				PBOpenRF(ioParam*,Boolean);pascal	OSErr				PBHOpenRF(ioParam*,Boolean);pascal	OSErr				PBLockRange(ioParam*,Boolean);pascal	OSErr				PBUnlockRange(ioParam*,Boolean);pascal	OSErr				PBRead(ioParam*,Boolean);pascal	OSErr				PBWrite(ioParam*,Boolean);pascal	OSErr				PBGetFPos(ioParam*,Boolean);pascal	OSErr				PBSetFPos(ioParam*,Boolean);pascal	OSErr				PBGetEOF(ioParam*,Boolean);pascal	OSErr				PBSetEOF(ioParam*,Boolean);pascal	OSErr				PBAllocate(ioParam*,Boolean);pascal	OSErr				PBAllocContig(ioParam*,Boolean);pascal	OSErr				PBFlushFile(ioParam*,Boolean);pascal	OSErr				PBClose(ioParam*,Boolean);/**************file Access		*/pascal	OSErr				PBCreate(fileParam*,Boolean);pascal	OSErr				PBHCreate(fileParam*,Boolean);pascal	OSErr				PBDirCreate(fileParam*,Boolean);pascal	OSErr				PBDelete(fileParam*,Boolean);pascal	OSErr				PBHDelete(fileParam*,Boolean);pascal	OSErr				PBGetFInfo(fileParam*,Boolean);pascal	OSErr				PBHGetFInfo(fileParam*,Boolean);pascal	OSErr				PBSetFinfo(fileParam*,Boolean);pascal	OSErr				PBHSetFinfo(fileParam*,Boolean);pascal	OSErr				PBSetFLock(fileParam*,Boolean);pascal	OSErr				PHBSetFLock(fileParam*,Boolean);pascal	OSErr				PBRstFLock(fileParam*,Boolean);pascal	OSErr				PBHRstFLock(fileParam*,Boolean);pascal	OSErr				PBSetVers(fileParam*,Boolean);pascal	OSErr				PBReName(fileParam*,Boolean);pascal	OSErr				PBHReName(fileParam*,Boolean);pascal	OSErr				PBGetCatInfo(CInfoPBPtr,Boolean);pascal	OSErr				PBSetCatInfo(CInfoPBPtr,Boolean);pascal	OSErr				PBCatMove(CMovePBPtr,Boolean);pascal	OSErr				PBOpenWD(WDPBPtr,Boolean);pascal	OSErr				PBCloseWD(WDPBPtr,Boolean);pascal	OSErr				PBGetWDInfo(WDPBPtr,Boolean);pascal	OSErr				PBGetFCBInfo(FCBPBPtr,Boolean);pascal	OSErr				PBHGetVolParms(HParmBlkPtr,Boolean);pascal	OSErr				PBHGetLogInInfo(HParmBlkPtr,Boolean);pascal	OSErr				PBHGetDirAccess(HParmBlkPtr,Boolean);pascal	OSErr				PBHSetDirAccess(HParmBlkPtr,Boolean);pascal	OSErr				PBHMapID(HParmBlkPtr,Boolean);pascal	OSErr				PBHMapName(HParmBlkPtr,Boolean);pascal	OSErr				PBHCopyFile(HParmBlkPtr,Boolean);pascal	OSErr				PBHMoveRename(HParmBlkPtr,Boolean);pascal	OSErr				PBHOpenDeny(HParmBlkPtr,Boolean);pascal	OSErr				PBHOpenRFDeny(HParmBlkPtr,Boolean);/*  Printing Manager */pascal	void				OrOpen(void);pascal	void				OrClose(void);pascal	void				PrintDefault(THPrint);pascal	Boolean				PrValidate(THPrint);pascal	Boolean				PrStlDialog(THPrint);pascal	Boolean				PrJobDialog(THPrint);pascal	void				PrJobMerge(THPrint,THPrint);pascal	TPPrPort			PrOpenDoc(THPrint,TPPrPort,Ptr);pascal	void				PrOpenPage(TPPrPort,Rect*);pascal	void				PrClosePage(TPPrPort);pascal	void				PrCloseDoc(TPPrPort);pascal	void				PrPicFile(THPrint,TPPrPort,Ptr,Ptr,TPrStatus*);pascal	short				PrError(void);pascal	void				PrSetError(short);pascal	void				PrDrvrOpen(void);pascal	void				PrDrvrClose(void);pascal	void				PrCtlCall(short,long,long,long);pascal	Handle				PrDrvrDCE(void);pascal	short				PrDrvrVers(void);pascal	void				PrGeneral(Ptr);/*  Vertical Retrace Manager     */pascal	OSErr				VInstall(QElemPtr);pascal	OSErr				VRemove(QElemPtr);pascal	OSErr				AttachVBL(short);pascal	OSErr				SlotVInstall(QElemPtr,short);pascal	OSErr				SlotVRemove(QElemPtr,short);pascal	OSErr				DoVBLTask(short);/*  System Error     */pascal	void				SysError(short);/*  OS Utilities     */pascal	OSErr				HandToHand(Handle*);pascal	OSErr				PtrToHand(Ptr,Handle*,long);pascal	OSErr				PtrToXHand(Ptr,Handle,long);pascal	OSErr				HandAndHand(Handle,Handle);pascal	OSErr				PtrAndHand(Ptr,Handle,long);pascal	Boolean				EqualString(char*,char*,Boolean,Boolean);pascal	void				UprString(char*,Boolean);pascal	OSErr				ReadDateTime(long*);pascal	void				GetDateTime(long*);pascal	OSErr				SetDateTime(long);pascal	void				Date2Secs(DateTimeRec*,long*);pascal	void				Secs2Date(unsigned long,DateTimeRec*);pascal	void				GetTime(DateTimeRec*);pascal	void				SetTime(DateTimeRec*);pascal	OSErr				InitUtil(void);pascal	OSErr				WriteParam(void);pascal	void				Enqueue(QElemPtr,QHdrPtr);pascal	OSErr				Dequeue(QElemPtr,QHdrPtr);pascal	long				GetTrapAddress(short);pascal	void				SetTrapAddress(long,short);pascal	void				Delay(long,long*);pascal	void				SysBeep(short);pascal	void				Environs(short*,short*);pascal	void				Restart(void);/*		pascal	void				SetUpA5(void);  		pascal	void				RestoreA5(void);  */pascal	long				NGetTrapAddress(short,Byte);pascal	void				NSetTrapAddress(long,short,Byte);pascal	short				RelString(char*,char*,Boolean,Boolean);pascal	char				GetMMUMode(void);pascal	void				SwapMMUMode(short*);/* List Manager Routines */pascal	ListHandle	LNew(Rect*,Rect*,Point,short,WindowPtr,Boolean,Boolean,Boolean,Boolean);pascal	void				LDispose(ListHandle);pascal	short				LAddColumn(short,short,ListHandle);pascal	short				LAddRow(short,short,ListHandle);pascal	void				LDelColumn(short,short,ListHandle);pascal	void				LDelRow(short,short,ListHandle);pascal	void				LAddToCell(Ptr,short,Cell,ListHandle);pascal	void				LClrCell(Cell,ListHandle);pascal	void				LGetCell(Ptr,short*,Cell,ListHandle);pascal	void				LSetCell(Ptr,short,Cell,ListHandle);pascal	void				LCellSize(Point,ListHandle);pascal	Boolean				LGetSelect(Boolean,Cell*,ListHandle);pascal	void				LSetSelect(Boolean,Cell,ListHandle);pascal	Boolean 			LClick(Point,short,ListHandle);pascal	long				LLastClick(ListHandle);pascal	void				LFind(short*,short*,Cell,ListHandle);pascal	Boolean				LNextCell(Boolean,Boolean,Cell*,ListHandle);pascal	void				LRect(Rect*,Cell,ListHandle);pascal	Boolean				LSearch(Ptr,short,Ptr,Cell*,ListHandle);pascal	void				LSize(short,short,ListHandle);pascal	void				LDraw(Cell,ListHandle);pascal	void				LDoDraw(Boolean,ListHandle);pascal	void				LScroll(short,short,ListHandle);pascal	void				LAutoScroll(ListHandle);pascal	void				LUpdate(RgnHandle,ListHandle);pascal	void				LActivate(Boolean,ListHandle);/*  Slot Manager    */#ifdef	_SlotMgr_	pascal	OSErr				SRsrcInfo(SpBlockPtr);	pascal	OSErr				SNextsRsrc(SpBlockPtr);	pascal	OSErr				SNextTypesRsrc(SpBlockPtr);	pascal	OSErr				SReadDrvrName(SpBlockPtr);	pascal	OSErr				SReadByte(SpBlockPtr);	pascal	OSErr				SReadWord(SpBlockPtr);	pascal	OSErr				SReadLong(SpBlockPtr);	pascal	OSErr				SGetcString(SpBlockPtr);	pascal	OSErr				SGetBlock(SpBlockPtr);	pascal	OSErr				SFindStruct(SpBlockPtr);	pascal	OSErr				SReadStruct(SpBlockPtr);	pascal	OSErr				SReadInfo(SpBlockPtr);	pascal	OSErr				SReadPRAMRec(SpBlockPtr);	pascal	OSErr				SPutPRAMRec(SpBlockPtr);	pascal	OSErr				SReadFHeader(SpBlockPtr);	pascal	OSErr				SCkCardStatus(SpBlockPtr);	pascal	OSErr				SFindDevBase(SpBlockPtr);	pascal	OSErr				SDeleteSRTRec(SpBlockPtr);	pascal	OSErr				SPtrToSlot(SpBlockPtr);	pascal	OSErr				InitSDeclMgr(SpBlockPtr);	pascal	OSErr				SPrimaryInit(SpBlockPtr);	pascal	OSErr				SCardChanged(SpBlockPtr);	pascal	OSErr				SExec(SpBlockPtr);	pascal	OSErr				SOffsetData(SpBlockPtr);	pascal	OSErr				SReadPBSize(SpBlockPtr);	pascal	OSErr				SCalcStep(SpBlockPtr);	pascal	OSErr				InitsRsrcTable(SpBlockPtr);	pascal	OSErr				InitPRAMRecs(SpBlockPtr);	pascal	OSErr				SSearchSRT(SpBlockPtr);	pascal	OSErr				SUpdateSRT(SpBlockPtr);	pascal	OSErr				SCalcSPointer(SpBlockPtr);	pascal	OSErr				SGetDriver(SpBlockPtr);	pascal	OSErr				SFindSInfoRecPtr(SpBlockPtr);	pascal	OSErr				SFindSRsrcPtr(SpBlockPtr);#endif