//a_Index.h#ifndef _INDEX#define _INDEX#include	"a_Crystal.h"#define	PLANE		false#define	DIRECTION	true class	DiffractObject;class	Index{public:	Crystal*		theCrystal;	short			h;	short			k;	short			l;	Boolean			direction;	Boolean			reduceFlag;	Boolean			resetMode;	float			x;	float			y;	float			z;	float			intensity;	float			angle;	Rect  			theSpotRect;	long			flags;	dcomplex		sF;	virtual void	DoInit(Boolean,Crystal*);	Index*			Init(Boolean,Crystal*);	virtual void	DoClose(void);	void 			DoCopy(Index *theIndex);	void			CopyIndexToPtr(Ptr thePtr);	void			CopyPtrToIndex(Ptr thePtr);	Boolean			GetIndex(DialogPtr,short);					/*  Get data from dialog			*/	void			SetIndex(DialogPtr,short);					/*  Set Dialog Info					*/	void			GetListIndex(ListHandle,Cell);				/*  Get data from List				*/	void			SetListIndex(ListHandle,Cell);				/* 	Set List data 	 				*/	void			SetListDir(ListHandle,Cell);				/* 	Set List plane/dir 	 			*/	void			ShowIndex(Point);							/*  Uses Chicago Font				*/			void			DrawIndex(Point);							/*  Uses courier Font					*/	void			EraseDrawnIndex(Point);						/*  Uses courier Font					*/	void			IndexFromText(char*);						/*  gets from text					*/	void			IndexToText(char*);							/*  sets  text						*/	void			IndexToIndecies(char*);						/*  Sets Indecies					*/	double			TheDSpacing(void);							/*  gets D spacing of index			*/	double			TheExtinctionDist(double RofEwaldSphere,double electronMassRation, short theBeamFlag);			/*	gets the extinction distance	*/	void			DirOfPlaneNormal(double*,double*,double*);	/* gets direction of the plane normal */	void			PlaneNormalOfDir(double *H,double *K,double *L); /* Gets the plane normal to a direction */	void			IndexToHex(short* H,short* K,short* T,short* L);	/* returns hexagonal indecies	*/	void			IndexFromHex(short u,short v,short t,short w);		/* sets indecies from hex input	*/	virtual void			ReadIndex(Crystal *aCrystal[4]);							/* read index from file */	virtual void			WriteIndex(void);							/* write index to file	*/	double 			GetTheAngle(Index *theI);	double 			GetTheXYZAngle(Index *aIndex);	double 			IndexStructureFactor(double theD,double electronMassRation,short theBeamFlag,dcomplex *cAb);	void			OrderIndicies(short *H,short *K,short *L);	Boolean 		CompareTo(short H,short K,short L);		void			GetDrawnText(char	theText[256],Rect theRect[4],short *textWidth);	void			ClearFlag(long theMask);	void			SetFlag(long theMask);	void			SetORFlag(short oRNum);	long 			MaskValue(long theMask);	Boolean 		ZoneAxis(Index *theIndex,Index *theZoneAxis);	double 			GetAngleBetDifCrystals(Index *theI);	short			ReduceIndex(void);	void			SetListIndecies(ListHandle theList,Cell theCell);	double			DirCosOfPlaneNormal(double *U,double *V,double *W);		double 			GetAngleBetweenProjections(Index * aIndex);	double			GetLength(void);	void 			GetTheUVWFromXYZ(double theXForm[][3]);	void 			GetXYZ(double theXForm[][3]);	void 			GetXYZAndMultByIntensity(double theXForm[][3]);	double 			GetAngleBetweenDirections(Index *theI);	Boolean			ContainedIn(Index *theI);	void			IndexToStraightText(char*	theText);	double			Periodicity(short order,double camerLength,double waveLength,double *diameter);	void			SetColor(void);	/*Added for V2.0*/	Boolean			EliminateIndexComponent(Index *index1);	Boolean  	SameIndex(Index *theObj);	void 			ConvertXYZToHKLReduce(void);	void			DirOfPlaneNormalXYZ(double *U,double *V,double *W);	void 			NormalizeToGreatestXYZ(void);	void 			IndexToSimpleText(char *theText);	void 			TextToIndecies(char*	theText);	void 			GetXYZFromHKL(double orientationMatrix[3][3]);	double		TheDSpacingDouble(void);	Boolean G_Vector(Index *zaIndex,Index *theZoneAxis);	void FindLowestDiffractingG(void);	dcomplex GetStructureFactor(void);	void  GetXYZFrHKL_Full(DiffractObject *theObj,short orNum);//does the complete transformation including orientation and ppt };#endif