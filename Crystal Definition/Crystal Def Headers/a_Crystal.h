//a_Crystal.h#ifndef _CRYSTAL#define _CRYSTAL#include	"COMPLEX_LOC.h"#include 	"PopUpMenu.h"/*dec 1992*/enum {		THE_ENTER_KEY	= -20,		APP_EVT_1		= -10,		UPDATE_EVT		= -4,		DRAG_WINDOW		= -3,		C_DO_MENU		= -2,		GO_AWAY_BOX		= -1,		IN_SYS_WINDOW	= 0,		C_DLOG_OK 		= 1,	//	1  -> 1		C_DLOG_CANCEL,			//	2  -> 2		DUMMY_ITEM_1,			//		-> 3		DUMMY_ITEM_2,			//		-> 4		C_SET_NUM_ATOMS,		//	3  -> 5		REFERENCES,				//	30 -> 6		SET_COLOR,				//	28 -> 7		R_TO_T,					//	31 -> 8		ADD_WYCKOFF,			//	29 -> 9		GRAB_CRYSTAL,			//	4  -> 10		SET_DEFAULT,			//	5  -> 11		C_THE_CHECK_BOX,		//	16 -> 12		A_PRAM,					//	6  -> 13		B_PRAM,					//	7  -> 14		C_PRAM,					//	8  -> 15		ALPHA_PRAM,				//	9  -> 16		BETA_PRAM,				//	10 -> 17		GAMMA_PRAM,				//	11 -> 18		C_THE_LIST_DATA,		//	15 -> 19		FILE_MENU_POP,			//	12 -> 20		LATTICE_TYPE,			//	13 -> 21		C_THE_LIST_RECT,		//	14 -> 22		THE_SCROLL_BARS,		//	17 -> 23		BACKGOUND_PICT,		// 	-> 24 		C_CRYSTAL_COLOR		//    -> 25//		LIST_TITLE_BAR,		//	18//		LATTICE_PARM_LABEL,	//	19//		OLD_ANGLE_LABELS,		//	20//		A_B_C_LABEL,			//	21//		UNITS_LABEL,			//	22//		GAMMA_PICT,				//	23//		BETA_PICT,				//	24//		ALPHA_PICT,				//	25//		FILE_MENU_LABEL,		//	26//		CRYSTAL_FAMILY_LABEL,//	27	};typedef struct	UnitCell{	float	a;	float	b;	float	c;	float	alpha;	float	beta;	float	gamma;} UnitCell;class Crystal;typedef	struct	SpotInfo{	Crystal			*theCrystal;	/* 4 */	short			h;				/* 2 */	short			k;				/* 2 */	short			l;				/* 2 */	Boolean			direction;		/* 2 */	float			x;				/* 4 */	float			y;				/* 4 */	float			z;				/* 4 */	float			intensity;		/* 4 */	float			angle;			/* 4 */	Rect			spotRect;		/* 8 */	long			flags;			/* 4 */	dcomplex		sF;}SpotInfo,*SpotInfoPtr,**SpotInfoHandle;typedef struct	Atom{	short	atomicNum;	short	wyckOffNum;	float	x;	float	y;	float	z;	float	bi;} Atom,*AtomPtr,**AtomHnd;// Modified Oct 1, 1995.// wckoffPosName was changed from a 5 char array to a 6 char array.// This mod word aligns the structure -- the short variable wckVersion provides// 32 bit alignment and provides a method for determination of the structure type.// Code has been added to make both types compatible//*********** Old Structure ***********////	typedef struct WckoffPosition{		//		char	wckoffPosName[5];//		short	wckoffPosNo;//		float	x;//		float	y;//		float	z;//		short	atomicNum;//	}WckoffPosition;//*************************************////*********** New Structure for 1.0 ***********//typedef struct WyckoffOld{			char	wckoffPosName[6];		// was 5	short	wckoffPosNo;	float	x;	float	y;	float	z;	short	atomicNum;	short	wckVersion;				// added;}WyckoffOld;//*********** New Structure for 2.0 ***********//typedef struct WckoffPosition{	char	wckoffPosName[6];	short	wckoffPosNo;	float	x;	float	y;	float	z;	float	bi;	short	atomicNum;}WckoffPosition;//**********************************************************************************typedef struct CrystalFace{	Handle			theCrystal;		/* 4 */	short			h;				/* 2 */	short			k;				/* 2 */	short			l;				/* 2 */	Boolean			direction;		/* 2 */	float			x;				/* 4 */	float			y;				/* 4 */	float			z;				/* 4 */	float			length;			/* 4 */	float			area;	Rect			spotRect;		/* 8 */	long			flags;		}CrystalFace,*CrystalFacePtr,**CrystalFaceHnd;typedef struct CrystalEdge{	short			vert1;				/* 2 */	short			vert2;				/* 2 */	short			face1;	short			face2;	float			x;				/* delta X */	float			y;				/* delta Y */	float			z;				/* delta Z */	}CrystalEdge,*CrystalEdgePtr,**CrystalEdgeHnd;typedef struct CrystalVertice{	float			x;				/* delta X */	float			y;				/* delta Y */	float			z;				/* delta Z */	short			face1;	short			face2;	short			face3;	}CrystalVertice,*CrystalVerticePtr,**CrystalVerticeHnd;typedef struct IntNatTblRsrc{	short	spaceGrpNm;	char	*headLine;	short	crystlMultiplicity;	short	posMultiplicity[30];	char	*posString[30];	char	*extinctString[30];}IntNatTblRsrc;#include	"a_UserDefAtoms.h"class Index;class	Crystal{		public:			short			idNum;								/*  crystal ID num					*/			short			lattice_Type;						/*  Crystal Lattice Type			*/			short			spaceGrpNm;												short			atom_Count;							/*  Num of entries used	- 1			*/			short			wy_Atom_Count;			short			noDifrntElem;			short			lastUserDef;						/*  Last user defined atom			*/			short			lastPhysicalParam;			short			lastThermoParam;			short			face_Count;			short			last_Edge;			short			last_Vertice;			short			fileNo;			short			cardNo;						UnitCell		theUnitCell;						/*  The unit cell specs				*/			UnitCell		theReducedCell;			double		sVals[6];							/*  S values for calcs				*/			double		volume;			float			volumeReduced;			char			*formulaText;			char			*crystalName;			char			*cODEN;			char			*author;			char			*reference;			short			year;			RGBColor		crystalColor;						/*	Color for spot objects			*/						short				elementList[20];			SpotInfo	dspacings[30];								/*SpotInfoCrys  Unit cell volume				*/			float				elasticConstants[21];									AtomHnd				theAtoms;							/*  Array of Atoms					*/			WckoffPosition		*theWyckAtoms;						UserDefAtom*		theUserAtoms[26];					/*  Array of user def atoms (obj)	*/								Crystal				*backUpCrystal;					CrystalFaceHnd		theFaces;			CrystalEdgeHnd		theEdges;			CrystalVerticeHnd	theVertices;			float					**physicalParams;			float					**thermoParams;			Boolean				referenceInfoSet;						virtual Boolean	InitCrystal(short);					/*  Crystal Def method				*/			virtual void	DoClose(void);						/*  Close crystal method			*/			void				CrystalDef(void);					/*	Crystal Definition Buffer		*/			Boolean			CopyCrystal(Crystal*);				/*	Copy self to indicated			*/			Boolean			DoDefine(void);						/*	Crystal Definition Method		*/	//		void				SetUnitCell(void);					/*  Do unit cell Method				*/	//		Boolean			ReadCrystal(void);					/*  Gets Crystal info from screen	*/			void				SetNumAtoms(void);					/*	Sets number of atoms in cell	*/			virtual PicHandle		DisplayCrystal(Rect*,short,short);	/*  Displays Crystal at point		*/			virtual void	InitAtomList(void);					/*  Initialize the atom list		*/			virtual void	ListAtoms(void);					/*  Writes list Atom list to screen	*/	//		void				KillAtomList(void);					/*  Kill the Current List			*/			void				DoCellUpdate(void);					/*  Updates the cuurent cell		*/			void				DoUserDefAtom(short* atomicNum);	/*  Displays UserDefined atom		*/			void				PackUDAtoms(void);					/*  Eliminates unused UD atoms		*/			short				TheAtomicNum(char*);				/*  Get the Atomic # from text		*/			Boolean			GetAtomicSymbol(short,char*);		/*  Ret Atomic # from text			*/	//		short				DoMenu(long	theResult);				/*  Do Menu Items					*/			void				FileSaveCrystal(short fileType);	/*	Save the crystal to the file	*/			void				FileOpenCrystal();					/*  Open the Crystal File			*/			void				FileReadCrystal(void);				/*  Read crystal from the file		*/			void				FileWriteCrystal(void);				/*	Write crystal to file			*/			void				GetSvals(void);						/*  Calculate the s vals			*/			void				CellVolume(void);					/*	Clculate Cell Volume			*/			double			DSpacing(short,short,short);		/*  Calculate DSpacing				*/			void				Get001XForm(double[][3]);			/*  Calculate the 001 transform		*/			void				PlaneToDir(double*,double*,double*);/* Convert a plane to a direction	*/			void				SetColor(void);						/* Calls PmForeColor for the crystals color */			void    			SetDSpace(void);			Boolean 			SameCrystal(Crystal* test);			double 			CrystalDensity(double *avgAtWt,double *avgZ);			void				OpenOldFormat(void);			void				OpenText(void);			void				SaveAsText(void);			void				SaveAsOldFormat(void);			/* copies new crystal format to old */			void				DoPrint(void);			void 				ChemicalFormula(void);			void 				TableDisplayCrystal(short *orgLeft,short *orgTop);			long 				AtomAtFace(double  theAtom[3]);			void 				DetermineEdges(void);			void 				DetermineCrystalFaces(void);			long				CornerInsideVolume(double  theAtom[3]);			void				DetermineInterceptionPoint(short face1,short face2,short face3);			void 				DetermineVertices(void);			void 				CrystalShapeParameters(double crystalVector[][3],Vector *unitFace,Vector *edgeDir,Vector *midPoint,													double *faceDist,double *faceArea,double *length,short *edge_Count);			void 				AtomsFromFormula(short total_Atoms);			Boolean 			DoUpDate(Crystal *compareCrystal);			void 				ReferenceDITL(void);			PicHandle		DrawMorphology(double xForm[3][3],Rect thePicRect);			void 				ElasticConstantSymmetry(void);/* Justin added this */			void 				JustifyAtomPos(void);			void 				EliminateDuplicates(void);			short				ReturnValance(short *atNum);			void				DetermineBraviasLattice(void);			void				AtomicScatteringByD(short theBeamFlag,double theD,double electronMassRation,double *theZs);			void				ConvertCODENToJournal(void);			Boolean			ReconfigureElementList(void);					char* 			PointGrpName(char *theText);			short 			GetPointGrp(void);			void 				Wigner_Seitz(void);  /* Calculates the Primitive Wigner/Seitz Cell Oct 1992 */			void				CleanBadPlanes(void); /* eliminates faces which are contained in shape */			void				GetPlaneOf3Points(double x[3],double y[3],double z[3],short *h,short *k,short *l);	//		void				ResetDialogBox(DialogPtr theDialog,short lattice_Type,PopUpMenu *fileMenu,PopUpMenu *popUpMenu);			Boolean 			RhomboToTrig(void);									void				ListDspacings(Rect *frameRect,short size,short font);/*new v2.0*/			void				ListComments(Rect *frameRect,short size,short font);/*new v2.0*/			void				ListAtomicPositions(Rect *frameRect,short size,short font);/*new v2.0*/			void				SetCrystalFromBasisSet(Index *index1,Index *index2,Index *index3,Boolean realLBasis);			void				GetReductionMatrix(double m[3][3],double t[2][3]);/*new v2.0*/			void				DetermineReducedCell(void);/*new v2.0*/			void 				NormalizeAlphBetGam(void);/*new v2.0*/			void				GetReciprocalLattice(UnitCell *theRCell,short dimension);			void 				ConvertJournalToCODEN(void);			void				DetermineReducedCell(float* y);			void 				GetDWFactor(AtomPtr theAtom);			void 				AtomicZAtomicWt(AtomPtr theAtom,double *atZ,double *atWt);			Ptr*  			AtomicScatteringSet(double electronMassRation,short theBeamFlag);			void 				ClearAtomicScatSet(Ptr* theHandle);			void 				CorrectDWToTemp(double temperature);//Bloch			void 				SpaceGrpName(char *theText);			double 			CorrectAtomDWToTemp(AtomPtr	theAtomsPtr,double temperature);			double		  DSpacingDouble(float x,float y,float z);			void				FileWriteOldDesktop();/*new v2.0*/};#endif