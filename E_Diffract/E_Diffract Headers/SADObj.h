//Jim:E_Diffract:E_Diffract Headers:SADObj.h #ifndef _SADOBJ#define _SADOBJ #include 	"LineObj.h"#include 	"alloyCompEnt.h"#include	"SearchObject.h"#include	"COMPLEX.h"#include "PointObj.h"#include "ObjectiveLens.h"class	GraphObject;class	TextTableObj;typedef	struct	PointInfo{	float			x;				/* 4 */	float			y;				/* 4 */	float			z;				/* 4 */	float			intensity;		/* 4 */}PointInfo,*PointInfoPtr,**PointInfoHdn;class StereoObject;class PoleBox;#pragma def_inherited onclass SADObj:public SpotObject{		public:			short				referenceCrystal;			short				unitOfMeasure;			Boolean			calculateFlags[4];			Boolean			plotFlags[6];			Boolean			objectDrawnFlag;			Boolean			showPeriods;			Boolean			calcPPtSize;			Boolean			kikuchiLines;						float				lastDSpace;			float				dspacings[31];									PointInfoHdn	streaks[3];			long					streakSize[3];						short					streakRes;			short					kLimit;						MenuHandle 		base_Crystal_Menu;			/*New with Version 2.0*/			PointObj			*theImagePixels;			Boolean				imageFlag;						float					**xDis;			float					**yDis;			TextTableObj	*theTable;					PoleBox		*thePoleBox;//Bloch			StereoObject *stereoObj;			double			voxelThickness;			double			sliceDistance;			short				numOfVoxSlice;			Boolean			autoSlice;			Boolean			multiSlice;			Boolean 		fullCalcPPt;			float				numGVectors;			Boolean			pptSimple;						void 			DefineAspectRatioSquare(Point thePoint);			void			SetImageAspectRatio(void);			void 			AutomatedRadialIntensity(void);			void			SetGraphObject	(GraphObject* theGraph);			void			SetTableObject	(TextTableObj* aTextTable);			void 			SetPointTable	(void);			void 			ShowGraph		(void);			void 			CenterPoints	(void);			void 			SetManualSpots	(Point thePoint);			void 			SetCenter		(Point thePoint);			void 			DetermineCameraConstantsFromStandard(void);			void			CorrectImageDistortions(void);	/* End of New with version 2.0*//*in Base*/	void			DoInit			(void);	/*in Base*/	void			MyCalculate		(void);/*in Base*/	void			DoPictDraw		(void);/*in Base*/	void			DrawTheText		(void);/*in Base*/	void			DoClose			(void);/*in Base*/	void			DoMenu			(long);				/*	Menu Method						*//*in Base*/	Boolean		DoContent		(Point);			/*	Content Method					*//*in Base*/	void			DoIdle			(void);				/*	Idle Routine					*//*in Base*/	void			DoDblClick		(Point);/*in Base*/	void			DoKey			(char);/*in Base*/	void			DoRefresh		(void);/*in Base*/	void			DoAuxWrite		(void);			/*	Stub for offspring writes		*//*in Base*/	void			DoAuxRead		(void);			/*	Stub for offspring reads		*/						void			ExperimentalDSpRing(Point thePoint);						void			GetDSpaceLine	(Point thePoint);							void			GetZoneAxisFrLine(Point thePoint);						void 			GetPrimitiveVolume(Point thePoint);						void			DoubleDiffractSimple(void);						Boolean		DoubleDiffractIterative(void);						Boolean 	SpotExists		(double theX,double theY,double testIntensity);						void 			DeleteWeakSpots	(void);						void 			DeleteDoubleDif	(void);						void 			ClearDspacings	(void);							void			AddSpotSummation(Point thePoint);						void			Set_Spot_Info	(Point thePoint);												PicHandle DisplayPict		(Rect *theRect,short horiz,short vert);/*in Base*/	void			RationalizeData(void);							void			FinishMenuSetUp(void);/*in Base*/	void			SetObjectMenu(void);						Boolean			SetMagnification(short pixelValue);						/*added for V2.0*/												void			NormalizeIntensity		(short baseCrystal,double maxIntensity[4]);						void			CalcPoleIntensities(void);						Boolean		TestIntensity	(double intensity);SpotInfoPtr		InsertData(double H,double K, double L, double intens,double x,double y,double z,										double angle,Crystal *thisCrystal,short plotCrystal,dcomplex sF,SpotInfoPtr thisSpot);								void			SetDeltas		(double *delH,double *delK,double *delL,double hmax,double kmax,double lmax);						Boolean		TestDimension	(double *theD,double *theDist,double h,double k,double l,double x2,double y2,double z2,double xLimit,														double yLimit,double zLimit,double zlow,double RofEwaldSph,double spikingFactor);						short 			PlotStreaks(long thePtX,long thePtY,float devParam,short crystal,float intensity,double grayGain);									void 			PrecipitateStreaking(short crystalNum,PointInfoPtr Io,long *totalPoints/*,double devParam*/);						Boolean 			StageControl(void);						void 			GetZoneAxisFromBox(Point thePoint);																		void 			CalculateKLines(void);																void			DrawSmallCircle(SpotInfo *thisPole,Boolean erase,double xMax,double yMax);						void			RotateStreaks(double theta);	virtual	void			InitializeGraph(void);	virtual		Point		MovePatternCenter(Point thePoint);	virtual 	void			MoveReconfigureSpot(Point thePoint);	virtual 	void			SetObjectWindowTitle(void);			virtual 	void			AddSpotSimple	(Point thePoint);	void			DoDefine		(void);	virtual		void		GetZoneAxisByPoint(Point thePoint);	virtual 	float			RotateSpotsAroundZ(Point thePoint);	void  ConvertToTextTable(void);	void  SetExpLattice(void);	void SetLatticeDblClick(Point thePoint);	Boolean MaintainLines(short maxLines,Boolean pinned,Point thePoint,Point lastPoint);	void SetMagLine(Point thePoint);	void SetupExpLattice(Point thePoint);	void CreateExpPointObj(void);	void PrecipitateSetUp(void);	//bloch //Overridevirtual void  	SetDefineObj(DialogPtr theDialog);	virtual void		ReadDefineDialog(DialogPtr theDialog,Boolean saveData);	virtual Boolean	DefineSwitch(DialogPtr theDialog,short theSelect,Boolean *saveData);	virtual void DoSetUp(void);		void SetFoilPtrs(Boolean thePtr1,short thePtr2,short thePtr3); //Override		void PlotKLines(SpotInfoPtr thisSpot);		void DoARotation(double angle,short axis);		void	CalculateScreenThetas(double *x,double *y,double *z,Point thePoint);		void SimplePrecipiStreak(short crystalNum,PointInfoPtr Io,long *totalPoints/*,double devParam*/);		void CalcDySinglePoint(void);		void SetAspectRatioDBox();/*in Base*/		Boolean	FindSpot(Point thePoint);/*in Base*/		Boolean	FindTrace(Point thePoint,short n);		Boolean 	FindIndividualTrace(SpotInfoPtr thisPole,LineObj *line,Point thePoint);		Point			FindCrossOver(SpotInfoPtr theSpot,Rect testRect);		Boolean		LabelAllLines(Boolean label);		void 			CleanLabel(TextObj* line);		void			DeleteSpot(void);		void 			LabelSpot(void);		void 			SetBeamORToPole(void);		Boolean		SetPoleDefinition(void);};#endif //	double* BlochMethod(float *theUgReal,float *theUgIm,double matrix[3][3],short nout,short nBeams,short pBeams,dcomplex *sF,SpotInfoPtr theSpotsSt);//matrix is the matrix required to tilt the reciprocal lattice to mimic the beam tilt//	void BethePerturbations(float *theUgReal,float *theUgIm,short nbeams,short pbeams);//	double* GetBeamIntensities(double bigKZ,float *ccR,float *ccI,float *vR,float *vI,dcomplex *cinV,short nbeams,short nout,dcomplex *sF,short theSpotLoc);//	void EisPack(short nm,short n,float *ar,float *ai,float *wr,float *wi,float *vr,float *vi,short *err);//	Boolean 	GetStartStop(SpotInfoPtr theSpotsHit,short *start,short *total);//	void	ThruThicknessRockingCurve(SpotInfoPtr theSpotsSt);//Bloch//	void 	ThruTilt(SpotInfoPtr theSpotsSt);//Bloch//	void 	FullPlot(short nout,SpotInfoPtr theSpotsSt);//Bloch//	void	FullTilt(short *nout,SpotInfoPtr theSpotsSt);//	Boolean  SetUpUgh(float **theUgReal,float **theUgIm,short *nBeams,short *pBeams,SpotInfoPtr baseSpots,short totalBeams);//	void		 SetBethPerturb(Point thePoint);//	Boolean  SortAndFindPerturbedBeams(short *nBeams,short *pBeams,SpotInfoPtr baseSpots,short totBeam);//	void 			BetheMenu(short item);//bloch	//	void SingleBlochWaveDynamic(short *nout,dcomplex *sF,SpotInfoPtr theSpotsSt);//	void CriticalVoltagePlot(SpotInfoPtr theSpotsSt);