//s.Jim:Event/Memory:Event Headers:D_Handles.h#ifndef _D_Handles#define _D_Handles		#define TEST_HANDLE						\	if(data_Count >= data_Length){			\		ExpandMemory();						\	}										\		#define		D_new(objType)		Z_new(new(objType))	#define		D_delete(objPtr)	\	{								\		Z_delete(objPtr);			\		delete(objPtr);				\	}								\		void		D_HandleInit(void);	void		SetBreaks(void);	void		TestNumObjects(void);	void		ShowData(void);	void		D_HandleReport(void);	void		VerifyHandles(void);	void		VerifyObjects(void);	void		D_ValidObject(Handle	theObject);	Boolean		IsValidObj(void*	theObj);			Handle		D_NewHandle(long theSize);		Handle		D_TempNewHandle(long theSize,short* error);	void		D_MFTempHLock(void* theHandle);	void		KillTempHandle(Handle	*thisHandle);	void		D_MFTempHUnlock(void* theHandle);		OSErr		D_HandToHand(Handle *theHandle);   /* Added By Jim September 1991 */	void		D_HLock(void* theHandle);	void		D_HUnlock(void* theHandle);	void		D_SetHandleSize(Handle	*theHandle,long	theSize);	void		KillHandle(Handle	*theHandle);	void		D_RecoverMemory(void*	theHandle,long	objectSize,long  count);			Ptr			D_NewPtr(long theSize);	Boolean		D_SetPtrSize(Ptr	*thePtr,long	theSize);	void		KillPtr(void* thePtr);			void 		*Z_new(void *);	void 		Z_delete(void *);			void		FlagMemError(short messageNum);	void		D_Debug_Message(short messageNumber);	MenuHandle	D_GetMenu(short menuID);	void		D_FlagUser(short stringResId);	PicHandle	D_OpenPicture(Rect *theRect);	void		D_DisposeRgn(RgnHandle	*theRgn);	void		D_KillPicture(PicHandle	thePicture);	RgnHandle	D_NewRgn(void);		Handle		D_GetNewMBar(short type);	void 		KillMBHandle(Handle	*theMenuBar);	Handle		D_GetResource(ResType rType,short rID);	void 		D_ReleaseResource(Handle	theResource);	MenuHandle	D_GetMenu(short menuID);	void	VerifyObjectsEveryWhere(void);	void D_SetClip(RgnHandle newClipRgn);#endif