//ects:D.M. v2.0:Sources.Jim:Utilities/Libs:Utilities Headers:VectorLib.h/*		VectorLib.c				*/extern	void				MatrixMultiply(double[][3],double[][3],double[][3]);extern	void				TransFormVector(double*,double*,double*,double[][3]);extern	void				ReverseTransFormVector(double*,double*,double*,double[][3]);extern	void				FindCenterXform(double,double,double,double[][3]);extern	void				FindHorizXform(double,double,double[][3]);extern	void				FindVertXform(double,double,double[][3]);extern	void 				FindRotateAboutPoleXform(double xx,double yy,double zz,double x,double y,double xForm[][3],double restoreM[][3]);extern	void 				FindYAxisXform(double x,double y,double xForm[][3]);extern	void 				FindXAxisXform(double x,double y,double xForm[][3]);extern	void				NormalizeMatrixRows(double[][3]);extern	void				NormalizeMatrixColumns(double[][3]);extern	void				NormalizeVector(double*,double*,double*);extern	void				InvertMatrix(double[][3]);extern	void				NegMatrix(double[][3]);extern	void				CrossProduct(double*,double*,double*,double,double,double,double,double,double);/* added by Jim */extern	void			NormalizeMatrixColumn (double matrix[][3]);extern	void 			VectorCrossProd(Vector vector1,Vector vector2,Vector *vector3);extern	void 			crossprod(double *vector1,double *vector2,double *vector3);extern	double 		Determinate3x3Matrix(double *matrix);extern	double 		VectorMag(Vector A);extern	double 		VectorDot(Vector A,Vector B);extern	short			VectorsEqual(Vector A,Vector B);extern	void 			VectorMultConstant(Vector *A,double C);extern	void			Identity_Matrix(double xForm[][3]);extern	void 			SetMatrixAEqB(double xForm[][3],double zForm[][3]);extern	double 		VectorsLength(Vector start,Vector end);extern	void 		RotatateMatrixAxis(double theXForm[3][3],double rotAngle,short axis);extern	void 		VectorCrossProduct		(double* theV1,double* theV2,double *theV3);extern	double		VectorDotProduct		(double* theV1,double* theV2,short length);extern	void		MatrixVectorMultiply	(double matrix[][3],double* vector,double* vectorEnd);extern	void		SetVectorToOrigin		(double *vector,short length);extern	void		AddVectors				(double* vector1,double* vector2,double* vector3);extern	void		MultiplyVector			(double* vector1,double vector[][3],double* vector2);extern	double 		RotateSingleConstantValue(double elastic_Const[6][6],double cos_Cry_Dis[6][6],short k,short l,short lt);extern	void 		MatrixVectorMatrixMultiply(double theM[][3],double *v,double result[][3],Boolean row);extern	void 		AddMatrix		(double m1[][3],double m2[][3],double m3[][3],Boolean add);extern	void		SetMatrix(double matrix[3][3],double a1,double a2,double a3,double b1,double b2,double b3												,double c1,double c2,double c3);extern	void		SetVector1EqualTo2		(double* V1,double* V2,short length,Boolean positive);extern	double		VectorLengthXYZ(double x,double y,double z);extern	double 		DotProductXYZ(double x,double y,double z,double x1,double y1,double z1);extern	void		TransFormVectorFl(float* a,float* b,float* c,double xForm[][3]);//extern	void C_InverseRow(short nmRows,short nCol,dcomplex *a,dcomplex *b,long *err);extern  void C_InverseRow(short nmRows,short nCol,dcomplex **a,dcomplex *b,long *err);extern	void NormalizeRotationMatrix(double matrix1[3][3]);