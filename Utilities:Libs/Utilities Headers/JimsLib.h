//m:Utilities/Libs:Utilities Headers:JimsLib.h/*#ifndef __Threads__#include "Threads.h"#include "ThreadsObj.h"#endif*//*  JimsLib.c */void		SetMarqueePattern(short* patnum);Boolean 	IsPressed(unsigned short k);void		CubicPermutate(short *face_CountPtr,CrystalFace theFace,						CrystalFace *theFaces,Boolean completeFlag,short lattcieType);						MenuHandle	DMJ_GetMenu(short resID) ;/* added July 1992 */void 		HexagonalPermutate(short *face_CountPtr,CrystalFace theFace,CrystalFace *theFaces,Boolean completeFlag);						void 		ConverttoReciprocal(double crystalvector[][3],double volume,Boolean leftHand);void		SetPopUp(MenuHandle theMenu,Rect theRect,short theItem);Boolean 	CheckHandleSize(Handle theDataHandle,long *data_Length,long data_Count,long sizeOf);Boolean 	CheckPtrSize(Ptr thePointer,short *data_Length,long sizeOf);unsigned short 	ConvertToMacBits		(unsigned short input);long 			ipow					(long num,long exp);Handle 		EliminateHKLRedundancy(short *data_Count,Handle theDataHandle);short 		Reduce(double*,double*,double*);/* Found in Index.c*/double 		AtomicScatterEl(double dInverse,double atomicNumber);double 		AtomicScatterXRay(double dInverse,double atomicNumber);double 		AtomicScatterNuetron(double dInverse,double atomicNumber);void		ErrorHandler			(short i,Boolean flag); void 		RootOfPolyUsingNewtonMethod(double QReal[7],double QImage[7]);void 		ErrorHandler(short number,Boolean quit);Boolean		Quit(void);void 		HoldMatrix(double matrix[][3]);void 		HoldDouble(double zval);void 		HoldText(char *zval);void 		HoldLong(long zval);void 		Hold(short zval);short 	SizeofReciprocalLattice(float h,float k,float l,double x,Crystal *aCrystal);Handle	SubCalcDSpacings			(Crystal *theCrystal,short h,short k,short l,short theBeamFlag,double minSF);pascal void GetPICTData				(Ptr dataPtr,short byteCount); /* Proceedure for DrawPicture to allow large pictures */short		Round									(double x);void 		SetConversionFlags		(unsigned short *flag,unsigned short *macFlag);void 		TestPosition(TPPrPort *thePrintPort,Rect theRect,short *theTop,short *theLeft,										short pageTop,short pageLeft,short secnColLeft,short *pageNo);long int ConvertToMac					(long int theValue);void 		SetConversionFlags2		(long int *flag,long int *macFlag);void		ConvertToCaps					(char *theText,short length);Boolean StringCompare					(char *text,char *test);Boolean	InRange								(double value,double compare,double range,short type);void		MoveARect							(Rect frameRect,short *moveH,short *moveV);void		ResizeARect						(Rect frameRect,Rect growRect, short *moveH,short *moveV);double 		AtomicScatterIon			(double dInverse,double atomicNumber);void 				ClearMenu(MenuHandle theMenu);RgnHandle 	SetClipToPort(WindowPtr theWindow,short l,short t,short r,short b);double			CalcExtinctionDistance(SpotInfo *thePole,double RofEwaldSphere);void 				AtomicScatterForDFromSet(double dInverse,Ptr* theHandle,double *theZs,short atom_Count);float	LeastSquaresOrientation(float offaxis[]);float	LeastSquareAnalysis(float []);//extern pascal	voidPtr	FullTiltThreadEntry( void *there);//extern pascal	voidPtr	ThruTiltThreadEntry( void *there);void				dm_FrameOval(Rect *theOval);void				dm_PaintOval(Rect *theOval);void				dm_FrameRect(Rect *theOval);void				dm_PaintRect(Rect *theOval);void				dm_EraseRect(Rect *theOval);Point IntersectionOvals(Rect oval1,Rect oval2);short GetVersion(short objectType);long	RoundLong(double x);int	JimsStructFactCompare(const void* spot1,const void* spot2);//short	JimsStructFactCompare(SpotInfo* spot1,SpotInfo* spot2)int	DspaceCompare(const void* spot1,const void* spot2);//short	DspaceCompare(SpotInfo* spot1,SpotInfo* spot2)int	InverseDSpaceCompare(const void* spot1,const void* spot2);//short	InverseDSpaceCompare(SpotInfo* spot1,SpotInfo* spot2)int	FloatCompare(const void* x,const void* y);//short	FloatCompare(float* x,float* y)void GetMuLambdaFromXYZ(double x,double y,double z,double *mu,double *lambda);Handle WriteToXmlString(char **charHandle,char *theText);Handle WriteToXmlChar(char **charHandle,char aChar);