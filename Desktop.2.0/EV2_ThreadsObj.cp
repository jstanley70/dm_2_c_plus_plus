// Threads.cp// Created by jstanly on Thu, Dec 7, 1995 @ 12:06 AM./*#ifndef __Threads__#include "ThreadsObj.h"#endifvoid ThreadsObj::InitThreads(void) {	long feature;	if (Gestalt(gestaltThreadMgrAttr,&feature) == noErr)		{#ifdef	powerc		//	If running on a PowerPC, make sure that we not only have the		//	68K Thread Manager, but also the PowerPC shared library, too.		//	Because of the wonders of weak linking and out of memory errors		//	we need to also check to make sure that an entrypoint in the library		//	is there, too. 	//	if (long(NewThread) != kUnresolvedSymbolAddress)			hasThreadManager = ((feature & ((1 << gestaltThreadMgrPresent) | (1 << gestaltThreadsLibraryPresent))) != 0);#else		hasThreadManager = ((feature & (1 << gestaltThreadMgrPresent)) != 0);#endif		}		if(hasThreadManager){			theThreadIDs = (ThreadID*)D_NewPtr(sizeof(ThreadID) * 50);			threadResult = (long*)D_NewPtr(sizeof(long) * 50);			maxThreads = 50;			threadCounterCoop = 0;			CreateCoopThread((ThreadEntryProcPtr)CSwitchboard,0L);					}else{			theThreadIDs = 0L;			maxThreads = 0;		}}#pragma segment Mainvoid ThreadsObj::CreateCoopThread(ThreadEntryProcPtr threadEntry, void* functionParam){	long	*thePtr;	if(!hasThreadManager)return;	if(threadCounterCoop >= maxThreads) return;		if( NewThread( kCooperativeThread, (ThreadEntryProcPtr)threadEntry, (void*) functionParam, 0L,kCreateIfNeeded,  &thePtr,				 &theThreadIDs[threadCounterCoop]) == noErr ){		threadResult[threadCounterCoop] = (long)thePtr;		threadCounterCoop++;		YieldToThreads(0L);	}			}#pragma segment Mainvoid ThreadsObj::YieldToThreads(ThreadID *theThread){	if(!hasThreadManager){AllowBackground();return;}	if(!theThread)YieldToAnyThread();	else YieldToThread(*theThread);	return;}#pragma segment Mainvoid ThreadsObj::DoClose(void){	if(!hasThreadManager){D_delete(this);return;}	YieldToThreads(0L);	if(theThreadIDs)	KillPtr(theThreadIDs);	if(threadResult)	KillPtr((Ptr)threadResult);			D_delete(this);		}void ThreadsObj::DeleteLastThread(void){	if(!hasThreadManager)return;	threadCounterCoop--;	DisposeThread (theThreadIDs[threadCounterCoop],(Ptr)threadResult[threadCounterCoop],false);}*/