// UextBoxFree.cp// Created by jstanly on Thu, Dec 29, 1994 @ 5:52 PM.#ifndef __UextBoxFree__#include "UextBoxFree.h"#endif#include	"Diffract_INCs.h"#include "StoneTableV3.h"#include	"Icons.h"#include 	"MonteCarloObj.h"/*TextBoxFree::TextBoxFree() {}TextBoxFree::~TextBoxFree(){}*/Boolean  TextBoxFree::DoInit(Rect *rView,Rect *rDataBnds,Point cellSize,ProcPtr procID,WindowPtr theWindow,Boolean drawIt,  Boolean hasGrow,Boolean scrollHoriz,Boolean scrollVert,															Boolean hasMove,Boolean hasClose,short textFont  ,short textSize,short textFace)//Override{	Point thePoint;	Boolean flag;	shrunk = false;		flag = DA2_Text_Box::DoInit (rView, rDataBnds, cellSize, procID, theWindow, drawIt, hasGrow, scrollHoriz, scrollVert,hasMove,hasClose, textFont, textSize, textFace);	selected = false;	thePoint.v = frameRect.top + 2;	thePoint.h = frameRect.left + 20;	offScreen	=	gCurrentObj->thePictRect.right + 800;	fileMenu 	= 	(PopUpMenu*)D_new(PopUpMenu);	fileMenu	->	InitAtPoint	(thePoint,1,39,true,false);	thePoint.h = 		fileMenu	->theMenuRect.right + 2;	grows			=		hasGrow;	editMenu 	= 	(PopUpMenu*)D_new(PopUpMenu);	editMenu	->	InitAtPoint	(thePoint,1,137,true,false);	SetRect(&iconBox,frameRect.left,frameRect.top,frameRect.left + 32,frameRect.top + 32);	selected = true;	TMX_DoDraw(true,theList);	Error();	shrunk = false;	return flag;}void  TextBoxFree::DrawList(void)//Override{	OSErr		myErr;	Rect			theRect;		if(shrunk){		Handle theSuite;		myErr = GetIconSuite(&theSuite,308,svAllAvailableData);		if(myErr)return;		myErr = PlotIconSuite(&iconBox,0,0,theSuite);		dm_FrameRect(&iconBox);		//ReleaseResource(theSuite);		myErr = DisposeIconSuite(theSuite,true);		return;	}//		inherited::DrawList();		dm_FrameRect(&closeRect);	dm_FrameRect(&shrinkRect);	theRect = shrinkRect;	theRect.bottom -= 4;	theRect.right  -= 4;	dm_FrameRect(&theRect);	dm_FrameRect(&titleRect);	dm_FrameRect(&frameRect);	dm_FrameRect(&growBox);		fileMenu->SetPopUp();	editMenu->SetPopUp();}Point  TextBoxFree::Move (Point thePoint)//Override{	short totalH,totalV;	Rect		theRect,oldTitleRect;	if(!moves) return thePoint;	if(shrunk){		theRect = iconBox;		MoveARect(iconBox,&totalH,&totalV);				if(totalH || totalV){			dm_EraseRect(&iconBox);			OffsetRect(&iconBox,totalH,totalV);			UnionRect(&theRect,&iconBox,&theRect);			InvalRect(&theRect);			UpdateEvent();		}		return thePoint;	}else{		theRect = frameRect;		theRect.top -= 24;		theRect.right += 24;				thePoint = inherited::Move(thePoint);				editMenu->MoveBy(thePoint);		fileMenu->MoveBy(thePoint);	}	oldTitleRect = titleRect;	SetFrame();	if(thePoint.h || thePoint.v){		UnionRect(&theRect,&frameRect,&theRect);		dm_EraseRect(&oldTitleRect);		dm_EraseRect(&titleRect);		InvalRect(&theRect);		UpdateEvent();	}	return thePoint;}void TextBoxFree::SetFrame(void){	if(shrunk) return;	inherited::SetFrame();	frameRect.top -= 20;	SetRect(&shrinkRect,				frameRect.right - 15,frameRect.top + 5,frameRect.right - 5,frameRect.top + 15);	SetRect(&titleRect,				frameRect.left,frameRect.top,frameRect.right,frameRect.top + 20);	SetRect(&closeRect,				frameRect.left + 5,frameRect.top + 5,frameRect.left + 15,frameRect.top + 15);		SetRect(&growBox,				frameRect.right - 10,frameRect.bottom - 10,frameRect.right,frameRect.bottom);}void TextBoxFree::DoDblClick(Point thePoint)//Override{	Rect resultRect;	if(shrunk && PtInRect(thePoint, &iconBox)){		shrunk = false;		gCurrentObj->refreshFlag = true;						TMX_Offset(-offScreen,0,theList);		Error();		OffsetRect(&frameRect,-offScreen,0);		thePoint.h = -offScreen;		thePoint.v = 0;		editMenu->MoveBy(thePoint);		fileMenu->MoveBy(thePoint);		TMX_DoDraw(true,theList);		Error();		resultRect = titleRect;		InsetRect(&resultRect,-16,-16);		UnionRect(&iconBox,&resultRect,&resultRect);		dm_EraseRect(&resultRect);		InvalRect(&resultRect);	}	}void  TextBoxFree::DoIdle  (void)//Override{		static short marqPat = 1;	//if(!selected) return;	if(!shrunk)inherited::DoIdle();	if(selected && grows){		if(!shrunk){			SetMarqueePattern	(&marqPat);			PenMode						(patXor);			dm_FrameRect					(&frameRect);			Delay							(2,&gLongScratch);			dm_FrameRect					(&frameRect);		}else{			SetMarqueePattern	(&marqPat);			PenMode						(patXor);			dm_FrameRect			(&iconBox);			Delay							(2,&gLongScratch);			dm_FrameRect			(&iconBox);		}		PenNormal					();		PenMode						(0);	}}Boolean TextBoxFree::DoContent(Point thePoint){	static long		lastClickTime = 0;	Rect					resultRect;		if(!shrunk){		if(!grows) selected = true;		if(!selected){			if(PtInRect(thePoint,&frameRect)){				selected = true;				TMX_DoDraw(true,theList);				Error();				return false;			}else{				if(next != 0L)					return next->DoContent(thePoint);			}			return false;		}else{			if(!PtInRect(thePoint,&frameRect)){				selected = false;				if(!grows) selected = true;				return false;			}		}		if(DoClickMenu( thePoint))return false;				if(PtInRect(thePoint,&shrinkRect)){			if(!grows){ selected = true; return true;}			selected = false;						shrunk = true;			resultRect = titleRect;			InsetRect(&resultRect,-16,-16);			UnionRect(&iconBox,&resultRect,&resultRect);			dm_EraseRect(&resultRect);			InvalRect(&resultRect);						TMX_Offset(offScreen,0,theList);			Error();			OffsetRect(&frameRect,offScreen,0);			thePoint.h = offScreen;			thePoint.v = 0;			editMenu->MoveBy(thePoint);			fileMenu->MoveBy(thePoint);			return false;		}		if(closes && PtInRect(thePoint,&closeRect))		{			if(!grows){ selected = true; return true;}			((MonteCarloObj*)gCurrentObj)->textBox = ((MonteCarloObj*)gCurrentObj)->textBox->CloseOne(this,0L);			return false;		}				doClickGrow ( gTheEvent);				if(PtInRect(thePoint,&titleRect)){			Move(thePoint); 			return false;		}				return inherited::DoContent(thePoint);	}else{		if(!selected){			if(PtInRect(thePoint,&iconBox)){				selected = true;				TMX_DoDraw(true,theList);				Error();				return false;			}else{				if(next != 0L)					return next->DoContent(thePoint);			}		}else{			if(!PtInRect(thePoint,&iconBox)){				selected = false;				//if(!grows){ selected = true; return true;}				return false;			}		}		if(PtInRect(thePoint,&iconBox)){				if(labs(TickCount() - lastClickTime) <= LMGetDoubleTime()){					return true;				}else{					lastClickTime  = TickCount();					Move(thePoint); 					return false;				}		}	}	return false;}void TextBoxFree::DoClose(void){	editMenu->DoClose();	fileMenu->DoClose();	if(shrunk)		InvalRect(&iconBox);	inherited::DoClose();}TextBoxFree* TextBoxFree::CloseOne(TextBoxFree*  textBox,TextBoxFree*  newPrev){	TextBoxFree *newStart;	if(textBox == this){		if(newPrev != 0L){			newPrev->next = next;			newStart = 0L;		}else{			newStart = (TextBoxFree*)next;		}				DoClose();		return (TextBoxFree*)newStart;	}	if(next != 0L) return  ((TextBoxFree*)next)->CloseOne(textBox,this);		return 0L;}Boolean TextBoxFree::DoClickMenu(Point thePoint){	long theResult;	theResult = editMenu->HitPopUp		( thePoint);	if(theResult)	{		theResult = theResult & 0x0000FFFF;		theResult = theResult |  0x00090000;		DoMenu(theResult);		return true;	}	theResult = fileMenu->HitPopUp		( thePoint);	if(theResult)	{		theResult = theResult & 0x0000FFFF;		theResult = theResult |  0x00080000;		DoMenu(theResult);		return true;	}	return false;}void  TextBoxFree::doClickGrow (EventRecord event)//Override{		short moveH,moveV;		Rect	oldTitleRect;		Point mouse;		Rect resultRect;		mouse = event.where;		GlobalToLocal(&mouse);		if(FrontWindow() != theWindow) return;		if(!PtInRect(mouse,&growBox) || !grows) return;		oldTitleRect = titleRect;		ResizeARect( growBox,frameRect , &moveH, &moveV);		if(moveH || moveV){			gCurrentObj->refreshFlag = true;			resultRect = frameRect;			InsetRect(&resultRect,-16,-16);			TMX_Size(frameRect.right-frameRect.left + moveH, frameRect.bottom-frameRect.top + moveV, theList);			Error();			SetFrame();			UnionRect(&frameRect,&resultRect,&resultRect);			dm_EraseRect(&titleRect);			dm_EraseRect(&oldTitleRect);			InvalRect(&resultRect);		}		}