//m:Desktop.2.0:IMAGE_2:Patterson.h#ifndef	_PATTERSON_OBJ#define	_PATTERSON_OBJ#include 	"a_DiffractObject.h"#include 	"a_ControlObj.h"#include	"MenuDefs.h"#include	"PointObj.h"#include	"a_D_Space.h"#include	"OneDisObj.h"#include	"ObjectiveLens.h"Ptr AllocPattersonObject(void);typedef	struct	SmallSpotInfo{		float		x;		float		y;		float		intensity;		dcomplex	sF;} SmallSpotInfo,*SmallSpotInfoPtr;class	PattersonObject:public OneDisObj{	public:	double		sigma;	short		noOfSlices;	short		plotType;	double		sliceThickness;	ObjectiveLens	*theLens;	virtual void		DoInit(void);	void		MyCalculate(void);	void		SetCalculationParameters(void);	void		SetUpStrucFactMap(void);	void 		NormalizeIntensity(short baseCrystal,double maxIntensity[4]);	void		CalculateSigma(void);	void		DoClose(void);	void		DoMenu(long theResult);	virtual void 		SetImageParameters(double *k_D,double *I_D,short *lastX,				long *twoXCount,long *twoYCount);					void		SetObjectWindowTitle(void);	void		CalcPoleIntensities();	void 		DoPictDraw(void);	void		OtherPictDraw(void);	Boolean		TestIntensity(double intensity);	void 		SetIntensities(void);	void 		DoDefine(void);	virtual void 		GrayScale(short theX,short theY,double intensity);	void		SetDeltas(double *delH,double *delK,double *delL,double hmax,double kmax,double lmax);	Boolean		TestDimension(double *theD,double *theDist,double h,double k,double l,double x2,double y2,double z2,double xLimit,				double yLimit,double zLimit,double zlow,double RofEwaldSph,double spikingFactor);	SpotInfoPtr	InsertData(double H,double K, double L, double intens,double x2,double y2,double z2,double angle,Crystal *theCrystal,short plotCrystal,dcomplex sF,SpotInfoPtr aSpot);};#endif