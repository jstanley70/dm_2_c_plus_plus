//rces.Jim:Stereographic:StereoObject.h#ifndef	_STEREO_OBJ#define _STEREO_OBJenum {		SP_UPDATE	= -4,	// 	-4		SP_OK	= 1,			//	->  1		SP_CANCEL,			// ->  2		SP_DUMMY_1,			// ->  3		SP_DUMMY_2,			// ->  4		MATRIX_PLANE,		// ->  5		MATRIX_DIR,			// ->  6		PPT_1_PLANE,		// ->  7		PPT_1_DIR,			// ->  8		PPT_2_PLANE,		// ->  9		PPT_2_DIR,			// -> 10		PPT_3_PLANE,		// -> 11		PPT_3_DIR,			// -> 12		FULL_SYMMETRY,		// -> 13		GREY_SCALE,			// -> 14		STRUCT_FACTS,		// -> 15		ADD_LABELS,			// -> 16		P0_TEXT,				// -> 17		D0_TEXT,				// -> 18		P1_TEXT,				// -> 19		D1_TEXT,				// -> 20		P2_TEXT,				// -> 21		D2_TEXT,				// -> 22		P3_TEXT,				// -> 23		D3_TEXT,				// -> 24		LBL_TO_TEXT,		// -> 25		BG_PICT				// -> 26	};		class SADObj;#pragma def_inherited onclass	StereoObject : public SpotObject{		public:			short			planeBounds[4];			short			dirBounds[4];			short			ZoomCount;			short			normalizeCount;			double			radius;			Boolean			labelMatrixFlag;			Boolean			structFactFlag;			Boolean			normalizeFlag;			Boolean			zoomFlag;			Boolean			fillPage;			Boolean			wulfNet;			float			wulfNetGreatDeg;			float			wulfNetSmallDeg;			float			exactDiameter;			float			unitsOfRadius;			Index*			g1;			Index*			g2;			Index*			dirA_1;			Index*			dirA_2;			Index*			dirB_1;			Index*			dirB_2;			double			angle1;			double			angle2;			double			habitAngle;			ZoomInfo			previousZoom;			short				labelBounds;			Boolean			plotZoneAxes;			Boolean			full_Symmetry;						long				totalPoles;			long				add_N_Pole;			long				maxPoles;			PolePosition	**poleHandle;			SADObj*			poleObject;			/*in Base*/	void			DoInit(void);			void	DoDefine(void);/*in Base*/	void			MyCalculate(void);			short				LocatePole(double*,double*,double*);/*in Base*/	void			DoPictDraw(void);/*in Base*/	void			DrawTheText(void);/*in Base*/	void			DoClose(void);			void				AddSpot(void);			void				AddThisSpot(double x,double y,double z);			virtual void	ZoomIn(Point);			virtual void	ZoomPrevious(void);			void				PlaneTraces(SpotInfoPtr);			void				TwoPointPlane(Boolean);			void				AddSmallCircle(void);			virtual void	DrawSmallCircle(SpotInfoPtr,Boolean);			void 				DrawArc(Rect,double,double,double);			void				AddTA(void);			virtual void	IrrationalDir(Point thePoint);			void				RotateVert(void);			void				RotateHoriz(void);			void				RotateToCntr(void);			virtual void	RotateAround(Point,Boolean,Boolean);			virtual void	RotateSpotsBase(double[][3]);			void				StandardProj(void);/*in Base*/	void			DoMenu(long);				/*	Menu Method						*//*in Base*/	Boolean		DoContent(Point);			/*	Content Method					*//*in Base*/	void			DoIdle();				/*	Idle Routine					*//*in Base*/	void			DoDblClick(Point);/*in Base*/	void			DoKey(char);/*in Base*/	void			DoRefresh(void);/*in Base*/	void			DoAuxWrite(void);			/*	Stub for offspring writes		*//*in Base*/	void			DoAuxRead(void);			/*	Stub for offspring reads		*/			void				DoDefectTrace(void);			void				DoDefectAnalysis(void);			void				FindBeamDir(Index*,Index*,double);			double			DrawDefect(Index*,Index*,Index*,double);			double			GetAngle(void);			void				SelectHabitPlane(void);			void				LockSpot(void);			void				DuplicateSpotAndPrime(SpotInfoPtr*,short);			short				PlaneSpotSort(SpotInfoPtr	theSpotArray,short	data_Count);			virtual void	FinishSetUp(void);/*in Base*/	void			RationalizeData(void);/*in Base*/	void			SetObjectMenu(void);			void 				SetXYZValueToHKL(double x,double y,double z,Boolean directFlag);			virtual void	PrintSetUp(void);/*in Base*/	void			DoPrint(void);			void				DrawWulfNet(void);			double			SetRadius(void);/*Added For V2*/			void 				DoSpotAdditionBySymmetry(void);/*new with version 2*/			void				SetScaleFactor(void);						virtual void 	ConvertMuLambdaToXYZ(double *x,double *y,double *z,double mu,double lambda);		virtual	Boolean ConvertPointToXYZCart(Point thePoint,double *x,double *y,double *z);	void RotateAroundX(Point where,short type,Boolean shifted,Boolean click);	void GetXYThetas(Point thePoint,double *x,double *y);	void DoARotation(double angle,short axis);	virtual void DoSetUp(void);			void AddPoleObject(PolePosition thePole,Boolean newStereo);	void PlotPoleObject(PolePosition *thePoles,long poleNum);	void GetORFromPoleObject(PolePosition *thePole,double theYForm[][3]);	void PlotPoleSet(void);	void PlotPolePositions(void);	void PlotSpotsFromPoleOR(PolePosition *thePole);	void DoPoleObjectMenu(short theItem);	Boolean DefinePoleFigure(void);	void DoPoleFigureMenu(short theItem);	void CalculatePoleStereogram(Point thePoint);	void DeterminePoleFigureOR(Point thePoint);	void CalculatePoles(Boolean addFlag);	void RunPoleStatistics(Point thePoint);	void DialogBoxForPoleOR(short spotLoc1,short spotLoc2);	void AddPoleDialog(void);	void DisplayORMatrices(void);	void SetMatrixToORExp(void);	void GetORFromPole_SpotObject(SpotInfoPtr theSpot,double theYForm[][3]); //Override};	#endif