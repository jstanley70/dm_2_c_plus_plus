//a_LatticeObject.h#ifndef _LATTICE	#define _LATTICE	#include "a_LatticeAtoms.h"	#include "a_Lat_Image_Vector.h"	#include "DefectObj.h"	#include "ML_Real_Lattice.h"	#pragma def_inherited on	enum {	DARK_GREY = 2,			MED_DARK_GREY,					MED_GREY,			MED_LIGHT_GREY,			LIGHT_GREY		};		enum {				ATOM_LABELS = 1,			ATOM_INFO,				ATOM_SEPARATION,				ANGLE_BETWEEN_ATOMS,			ATOM_DIRECTION = 6,			ATOM_PLANE,			ATOMS_ON_PLANE = 9,			NEAREST_ATOM,			LAT_SELECT_ATOMS = 12		};		enum {			DO_DEFINE = 1,			DO_REDRAW,			LAT_DIVIDER1,			HIDE_ATOMS,			HIDE_ELEMENT,			SLICE_LATTICE,			SHOW_ALL,			LAT_DIVIDER2,			LAT_ZOOM_IN,			LAT_ZOOM_OUT,			LAT_ZOOM_ALL,			LAT_DIVIDER3,			LAT_SHADE_ATOMS,			ADD_DEFECTS		};			enum {			ROTATE_ANY_FUNC = 7,			HIDE_ATOMS_FUNC,			HIDE_ELEMENT_FUNC,			ANGLE_BETWEEN_ATOMS_FUNC,			DISTANCE_BETWEEN_ATOMS_FUNC,			ATOM_PLANE_FUNC,			ATOM_DIRECTION_FUNC,			LABEL_ATOM_FUNC,			NEAREST_NEIGHBOR_FUNC,			HILITE_ATOM_PLANE_FUNC,			SHOW_ATOM_INFO_FUNC /*dec 1992*/		};			enum {			UNIT_CELL = 1,			UNIT_LATTICE,			LATTICE_8_CELL,			LATTICE_64_CELL,			GEOMETRIC_SHAPE = 6		};			/*	Ten simultaneous elements will be supported, on a 256 color screen this will 	*//*	allow 24 shades to be displayed for each atom.	*/	typedef struct point3D{			double		x;			double		y;			double		z;		} point3D,*point3DPtr,*point3DHandle;					class	LatticeObject:public DiffractObject{		public:			short				imageType;			short				displayType;			short				radiusType;			short				colors[110];			Point				imageCenter;			Point				centerOffset;			double				scaling;			Boolean				geometryFlag;			Boolean				sliceFlag;			Boolean				renderFlag;			latticeVector		cellCenter;			latticeVector		cellVectors[8];			lattice*			theAtoms;			ImageVector*		theImageVectors;			LatticeAtom*			currentAtom[3];			short				numAtomsToHold;			PopUpPicture		*thePopUpPict;			short				spotLoc;			short				heightOfRuler;			DefectObj*			theDefects;/*in Base*/	void			DoInit(void);				/*  Default Object Init method		*//*in Base*/	void			DoDefine(void);				/*  Object definition method		*//*in Base*/	void			DoPrint(void);				/*  Object Print method				*//*in Base*/	void			DoAuxWrite(void);			/*	Stub for offspring writes		*//*in Base*/	void			DoAuxRead(void);			/*	Stub for offspring reads		*//*in Base*/	void			DoClose(void);				/*	Object Close method				*//*in Base*/	void			DoMenu(long);				/*	Menu Method						*//*in Base*/	Boolean			DoContent(Point);			/*	Content Method					*//*in Base*/	void			DoIdle(void);				/*	Idle Routine					*//*in Base*/	void			DoRefresh(void);			/*	Screen	Refresh					*//*in Base*/	void			DoCalculate(void);			/*  for compatibility				*//*in Base*/	void			DoPictDraw(void);			/*  Dummy routine					*/			WindowPtr		OpenObjectWindow(void);		/*	Open the proper window / pltt	*/			void			CenterPicture(void);			void			DoZoom(double);			Boolean			RotateAroundX(void);			Boolean			RotateAroundY(void);			Boolean			RotateAroundZ(void);			Boolean			RotateAroundAny(void);			void			LMoveTo(latticeVectorPtr);			void			LLineTo(latticeVectorPtr);/*in Base*/	void			DoDblClick(Point where);			void			GetColors(void);			void			View001(void);			void			AdjustPlot(void);			void			RotateToSpecifiedDir(void);			/* the following subroutines are found in LatticeInfo.c */			void 			GetAngleBetweenAtoms(Point thePoint);			void 			HilightAtom(LatticeAtom theAtom);			PicHandle		SetInfoPict(void);			void			ShowInfo(void);			Boolean			FindAtom				(Point thePoint);			void			GetDistanceBetweenAtoms	(Point thePoint);			void			GetAtomPlane			(Point thePoint);			void			GetAtomDirection		(Point thePoint);			void			HiliteAtomPlane			(void);			void			ShowNearestNeighbors	(Point thePoint);			void			LabelAtom				(Point thePoint);			void  			DrawAtomLabel			(LatticeAtomPtr theAtom);			Boolean  		MaintainAtoms			(Point thePoint,short number);			short    		MaintainNearestNeighbors(double * bondLength);			void			MaintainHilitedPlanes(Index* newIndex,double theXForm[3][3],Boolean multiplePlanes);/*in Base*/	void			SetObjectMenu			(void);/* Jim 1992 */			void			DrawLatticeToCrystalMorphology(void);			void			DrawHexUnitCell			(void);			void 			DrawLineAtomToAtom(LatticeAtom atom1,LatticeAtom Atom2);			void			ConvertToUnitCell(short crystalNo);	void SetAndRotate(double matrix[3][3]);	void 	DoARotation(double degree,short axis);		void  DoDefSetUp(DialogPtr theDialog,ML_RealLatParamsPtr theParams);	void	DoLatReadDef(DialogPtr theDialog,ML_RealLatParamsPtr theParams,Boolean saveData);	Boolean	DoHitLat(ML_RealLatParamsPtr theParams,short theSelect,Boolean *saveData);	void DoSetUp(void);	short  SetPictMode(short theItem);//bloch	void  CheckMode(void);	};	/************************************ Menu ID Defs *******************************/	#define	LATTICE_MENU	5	#define	ROTATION_MENU	6	#define	INFO_MENU_LATTICE			7007	#define LATTICE_PLANE_ROTATE   7002	/************************************ Function Defs ******************************/	enum {	ROTATE_X = 1,			ROTATE_Y,			ROTATE_Z,			ROTATE_ANY,			DIVIDER3,			VIEW_001,			ROTATE_TO_PLANE_DIR		};		#endif	